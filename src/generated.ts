// Generated by @wagmi/cli@0.1.15 on 5/3/2023 at 7:25:28 PM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/collateralChainlinkMock/MockV3Aggregator.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalCollateralChainlinkMockMockV3AggregatorABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_decimals', internalType: 'uint8', type: 'uint8' },
      { name: '_initialAnswer', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getAnswer',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_roundId', internalType: 'uint80', type: 'uint80' }],
    name: 'getRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestAnswer',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_answer', internalType: 'int256', type: 'int256' }],
    name: 'updateAnswer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_roundId', internalType: 'uint80', type: 'uint80' },
      { name: '_answer', internalType: 'int256', type: 'int256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      { name: '_startedAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateRoundData',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalCollateralChainlinkMockMockV3AggregatorAddress =
  '0x27F4A37Ce881a405BdceCa1bc91E2fF2622E763F' as const

export const synthetixSandboxLocalCollateralChainlinkMockMockV3AggregatorConfig =
  {
    address:
      synthetixSandboxLocalCollateralChainlinkMockMockV3AggregatorAddress,
    abi: synthetixSandboxLocalCollateralChainlinkMockMockV3AggregatorABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/collateralToken/MintableToken.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalCollateralTokenMintableTokenABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'initialSupply', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalCollateralTokenMintableTokenAddress =
  '0x7B05A2baA61dFd56951c14597550c803e92B1C95' as const

export const synthetixSandboxLocalCollateralTokenMintableTokenConfig = {
  address: synthetixSandboxLocalCollateralTokenMintableTokenAddress,
  abi: synthetixSandboxLocalCollateralTokenMintableTokenABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/AccountProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketAccountProxyAddress =
  '0x99FF5BC32A9A9aEd9B060739ce9e232F6b5C1e1A' as const

export const synthetixSandboxLocalPerpsMarketAccountProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketAccountProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/AsyncOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketAsyncOrderModuleABI = [
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketAsyncOrderModuleAddress =
  '0x0E86250fEbcc22c5053cc9b7D6cB1E0a5F80F63d' as const

export const synthetixSandboxLocalPerpsMarketAsyncOrderModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketAsyncOrderModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketAsyncOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/AtomicOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketAtomicOrderModuleABI = [] as const

export const synthetixSandboxLocalPerpsMarketAtomicOrderModuleAddress =
  '0xd9c6E345b7e8381b7327c8dB8C84ABafc6CbF119' as const

export const synthetixSandboxLocalPerpsMarketAtomicOrderModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketAtomicOrderModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketAtomicOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/CollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketCollateralModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketCollateralModuleAddress =
  '0x621A2d7Bce753321f793172511D1C71d6A39E5d3' as const

export const synthetixSandboxLocalPerpsMarketCollateralModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketCollateralModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketCoreModuleAddress =
  '0x9E300c1060815A81A145d455aDa5e0f722709f95' as const

export const synthetixSandboxLocalPerpsMarketCoreModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketCoreModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketFeatureFlagModuleAddress =
  '0x8bc7Fd740fFBc1640b3a4EE489f35250a63C20F2' as const

export const synthetixSandboxLocalPerpsMarketFeatureFlagModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketFeatureFlagModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/InitialProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketInitialProxyAddress =
  '0x02c97c94ca524fc3be68eb23459eE63014D6A69D' as const

export const synthetixSandboxLocalPerpsMarketInitialProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketInitialProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/LimitOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketLimitOrderModuleABI = [] as const

export const synthetixSandboxLocalPerpsMarketLimitOrderModuleAddress =
  '0x4bd3026d3EbE3D660330b9502E07e427B4657E6a' as const

export const synthetixSandboxLocalPerpsMarketLimitOrderModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketLimitOrderModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketLimitOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/LiquidationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketLiquidationModuleAddress =
  '0x3e01e70C22f43d77C104817119a2a8113813aeAA' as const

export const synthetixSandboxLocalPerpsMarketLiquidationModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketLiquidationModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/MarketConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketMarketConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketMarketConfigurationModuleAddress =
  '0x1E02Dd580001f98D69708fF5f8bb1D6Cc38e0287' as const

export const synthetixSandboxLocalPerpsMarketMarketConfigurationModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketMarketConfigurationModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketMarketConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/PerpsAccountModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketPerpsAccountModuleABI = [
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketPerpsAccountModuleAddress =
  '0x12A3386bE5991E7218C2949262d92bD91dd74Ee5' as const

export const synthetixSandboxLocalPerpsMarketPerpsAccountModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketPerpsAccountModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketPerpsAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/PerpsMarketFactoryModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketPerpsMarketFactoryModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'notNominatedAddress', internalType: 'address', type: 'address' },
    ],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketFactoryModuleAddress =
  '0x5B7f3A742B804fa07A39581Ac3439F9F1276cdc8' as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketFactoryModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketPerpsMarketFactoryModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketPerpsMarketFactoryModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/PerpsMarketProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketPerpsMarketProxyABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketProxyAddress =
  '0x02c97c94ca524fc3be68eb23459eE63014D6A69D' as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketPerpsMarketProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketPerpsMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/PerpsMarketRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketPerpsMarketRouterABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newNominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'MarketPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'perpsMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'marketOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketName',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'marketSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketName', internalType: 'string', type: 'string' },
      { name: 'marketSymbol', internalType: 'string', type: 'string' },
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createMarket',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'spotMarket',
        internalType: 'contract ISpotMarketSystem',
        type: 'address',
      },
    ],
    name: 'setSpotMarket',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthDeductionPriority',
        internalType: 'uint128[]',
        type: 'uint128[]',
      },
    ],
    name: 'setSynthDeductionPriority',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'perpsMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'openPosition',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalAccountOpenInterest',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'totalCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { type: 'error', inputs: [], name: 'FlaggedForLiquidation' },
  {
    type: 'error',
    inputs: [
      { name: 'availableMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'minMargin', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientMargin',
  },
  {
    type: 'error',
    inputs: [{ name: 'leftover', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientMarginError',
  },
  {
    type: 'error',
    inputs: [
      { name: 'status', internalType: 'enum AsyncOrder.Status', type: 'uint8' },
    ],
    name: 'InvalidOrder',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  { type: 'error', inputs: [], name: 'OrderNotValid' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementExpiration',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'SettlementWindowExpired',
  },
  { type: 'error', inputs: [], name: 'ZeroSizeOrder' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'commitment',
        internalType: 'struct AsyncOrder.OrderCommitmentRequest',
        type: 'tuple',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'retOrder',
        internalType: 'struct AsyncOrder.Data',
        type: 'tuple',
        components: [
          { name: 'accountId', internalType: 'uint128', type: 'uint128' },
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          { name: 'acceptablePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: 'fees', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settle',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'available', internalType: 'uint256', type: 'uint256' },
      { name: 'required', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralAvailableForWithdraw',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MaxCollateralExceeded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'modifyCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxCollateralAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxCollateralAmount',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'availableCollateralUsd',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'IneligibleForLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'liquidate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'liquidateFlagged',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketRouterAddress =
  '0x5E24C91ec6E9f5D4746B123E177bC96BEf695c57' as const

export const synthetixSandboxLocalPerpsMarketPerpsMarketRouterConfig = {
  address: synthetixSandboxLocalPerpsMarketPerpsMarketRouterAddress,
  abi: synthetixSandboxLocalPerpsMarketPerpsMarketRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/AsyncOrderConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'marketOwner', internalType: 'address', type: 'address' },
        { name: 'sender', internalType: 'address', type: 'address' },
      ],
      name: 'OnlyMarketOwner',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'strategyId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'SettlementStrategyAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'strategyId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
      ],
      name: 'SettlementStrategyUpdated',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'strategy',
          internalType: 'struct SettlementStrategy.Data',
          type: 'tuple',
          components: [
            {
              name: 'strategyType',
              internalType: 'enum SettlementStrategy.Type',
              type: 'uint8',
            },
            {
              name: 'settlementDelay',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'settlementWindowDuration',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'priceVerificationContract',
              internalType: 'address',
              type: 'address',
            },
            { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'url', internalType: 'string', type: 'string' },
            {
              name: 'settlementReward',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'priceDeviationTolerance',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'minimumUsdExchangeAmount',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'maxRoundingLoss',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'disabled', internalType: 'bool', type: 'bool' },
          ],
        },
      ],
      name: 'addSettlementStrategy',
      outputs: [
        { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'getSettlementStrategy',
      outputs: [
        {
          name: 'settlementStrategy',
          internalType: 'struct SettlementStrategy.Data',
          type: 'tuple',
          components: [
            {
              name: 'strategyType',
              internalType: 'enum SettlementStrategy.Type',
              type: 'uint8',
            },
            {
              name: 'settlementDelay',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'settlementWindowDuration',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'priceVerificationContract',
              internalType: 'address',
              type: 'address',
            },
            { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'url', internalType: 'string', type: 'string' },
            {
              name: 'settlementReward',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'priceDeviationTolerance',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'minimumUsdExchangeAmount',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'maxRoundingLoss',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'disabled', internalType: 'bool', type: 'bool' },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
        { name: 'enabled', internalType: 'bool', type: 'bool' },
      ],
      name: 'setSettlementStrategyEnabled',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderConfigurationModuleAddress =
  '0x4E976A6D19743Ef83Aa1890282b69Ccd6AE8abde' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/AsyncOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderModuleAddress =
  '0x3baAe54CC1C1D52ED68CE027d3da49B080C8e867' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/AsyncOrderSettlementModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderSettlementModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InvalidClaim',
    },
    { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
    {
      type: 'error',
      inputs: [
        { name: 'minimum', internalType: 'uint256', type: 'uint256' },
        { name: 'actual', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'MinimumSettlementAmountNotMet',
    },
    {
      type: 'error',
      inputs: [
        { name: 'sender', internalType: 'address', type: 'address' },
        { name: 'urls', internalType: 'string[]', type: 'string[]' },
        { name: 'callData', internalType: 'bytes', type: 'bytes' },
        { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
        { name: 'extraData', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'OffchainLookup',
    },
    {
      type: 'error',
      inputs: [
        { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
        { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'OrderAlreadySettled',
    },
    {
      type: 'error',
      inputs: [
        { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        { name: 'startTime', internalType: 'uint256', type: 'uint256' },
        { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'OutsideSettlementWindow',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      type: 'error',
      inputs: [
        { name: 'deviation', internalType: 'uint256', type: 'uint256' },
        { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'PriceDeviationToleranceExceeded',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'strategyType',
          internalType: 'enum SettlementStrategy.Type',
          type: 'uint8',
        },
      ],
      name: 'SettlementStrategyNotFound',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'asyncOrderId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'finalOrderAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'fees',
          internalType: 'struct OrderFees.Data',
          type: 'tuple',
          components: [
            { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
            {
              name: 'utilizationFees',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'skewFees', internalType: 'int256', type: 'int256' },
            { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
          ],
          indexed: false,
        },
        {
          name: 'collectedFees',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'settler',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'OrderSettled',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'PRECISION',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'settleOrder',
      outputs: [
        { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
        {
          name: 'fees',
          internalType: 'struct OrderFees.Data',
          type: 'tuple',
          components: [
            { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
            {
              name: 'utilizationFees',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'skewFees', internalType: 'int256', type: 'int256' },
            { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
          ],
        },
      ],
    },
    {
      stateMutability: 'payable',
      type: 'function',
      inputs: [
        { name: 'result', internalType: 'bytes', type: 'bytes' },
        { name: 'extraData', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'settlePythOrder',
      outputs: [
        { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
        {
          name: 'fees',
          internalType: 'struct OrderFees.Data',
          type: 'tuple',
          components: [
            { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
            {
              name: 'utilizationFees',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'skewFees', internalType: 'int256', type: 'int256' },
            { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
          ],
        },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderSettlementModuleAddress =
  '0xA4Ec62f86109A8D021B1AE30b737Bf2174D572bc' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderSettlementModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderSettlementModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketAsyncOrderSettlementModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/AtomicOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketAtomicOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAtomicOrderModuleAddress =
  '0x1A0927B7A2861EE8BEF5BCcfe6e0dfAB76231F80' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketAtomicOrderModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketAtomicOrderModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketAtomicOrderModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketCoreModuleAddress =
  '0xD8aAaD19E284C4481738d088A09A0f879dA8A3dF' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketCoreModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSpotMarketCoreModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSpotMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketFeatureFlagModuleAddress =
  '0xD095c6fBd5Df38E37657a1B75bAC0Ec82D67A6Cb' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketFeatureFlagModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketFeatureFlagModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketFeatureFlagModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/FeeCollectorMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketFeeCollectorMockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tradeType', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'quoteFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_usdToken',
        internalType: 'contract ITokenModule',
        type: 'address',
      },
    ],
    name: 'setUsdToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'usdToken',
    outputs: [
      { name: '', internalType: 'contract ITokenModule', type: 'address' },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketFeeCollectorMockAddress =
  '0x2710cCB2ce5F658099b0859fBf8d097DCDF30d62' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketFeeCollectorMockConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketFeeCollectorMockAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketFeeCollectorMockABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/InitialSpotMarketProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketInitialSpotMarketProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketInitialSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketInitialSpotMarketProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketInitialSpotMarketProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketInitialSpotMarketProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/MarketConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketMarketConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
      name: 'InvalidCollateralLeverage',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'invalidFeeCollector',
          internalType: 'address',
          type: 'address',
        },
      ],
      name: 'InvalidFeeCollectorInterface',
    },
    { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
    {
      type: 'error',
      inputs: [
        { name: 'marketOwner', internalType: 'address', type: 'address' },
        { name: 'sender', internalType: 'address', type: 'address' },
      ],
      name: 'OnlyMarketOwner',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'asyncFixedFee',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'AsyncFixedFeeSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'atomicFixedFee',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'AtomicFixedFeeSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'collateralLeverage',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'CollateralLeverageSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'feeCollector',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'FeeCollectorSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'skewScale',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'MarketSkewScaleSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'utilizationFeeRate',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'MarketUtilizationFeesSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'referrer',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'sharePercentage',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'ReferrerShareUpdated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'transactor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'fixedFeeAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'TransactorFixedFeeSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'wrapFee',
          internalType: 'int256',
          type: 'int256',
          indexed: false,
        },
        {
          name: 'unwrapFee',
          internalType: 'int256',
          type: 'int256',
          indexed: false,
        },
      ],
      name: 'WrapperFeesSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setAsyncFixedFee',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setAtomicFixedFee',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'collateralLeverage',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'setCollateralLeverage',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'transactor', internalType: 'address', type: 'address' },
        { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setCustomTransactorFees',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'feeCollector', internalType: 'address', type: 'address' },
      ],
      name: 'setFeeCollector',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setMarketSkewScale',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'utilizationFeeRate',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'setMarketUtilizationFees',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'wrapFee', internalType: 'int256', type: 'int256' },
        { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
      ],
      name: 'setWrapperFees',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'referrer', internalType: 'address', type: 'address' },
        { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'updateReferrerShare',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketMarketConfigurationModuleAddress =
  '0xF37208BF516554ad1B41389D60fac9E0C7a5dF1d' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketMarketConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketMarketConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketMarketConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/OracleVerifierMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketOracleVerifierMockABI = [
  { type: 'error', inputs: [], name: 'InsufficientFee' },
  { type: 'error', inputs: [], name: 'InvalidArgument' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceDataSource' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceMessage' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceTarget' },
  { type: 'error', inputs: [], name: 'InvalidUpdateData' },
  { type: 'error', inputs: [], name: 'InvalidUpdateDataSource' },
  { type: 'error', inputs: [], name: 'InvalidWormholeVaa' },
  { type: 'error', inputs: [], name: 'NoFreshUpdate' },
  { type: 'error', inputs: [], name: 'OldGovernanceMessage' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFound' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFoundWithinRange' },
  { type: 'error', inputs: [], name: 'StalePrice' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'updateDataSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'updateData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'priceIds', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'minPublishTime', internalType: 'uint64', type: 'uint64' },
      { name: 'maxPublishTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        name: 'priceFeeds',
        internalType: 'struct IPythVerifier.PriceFeed[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'price',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'emaPrice',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price',
    outputs: [{ name: '', internalType: 'int64', type: 'int64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newPrice', internalType: 'int64', type: 'int64' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'chainlinkBlob', internalType: 'bytes', type: 'bytes' }],
    name: 'verify',
    outputs: [
      { name: 'verifierResponse', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketOracleVerifierMockAddress =
  '0x204eC246f58d06878AbAD54542712C40F918a5E1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketOracleVerifierMockConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketOracleVerifierMockAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketOracleVerifierMockABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/SpotMarketFactoryModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketFactoryModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
    {
      type: 'error',
      inputs: [
        {
          name: 'synthImplementation',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InvalidSynthImplementation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'MissingAssociatedSystem',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketOwner', internalType: 'address', type: 'address' },
        { name: 'sender', internalType: 'address', type: 'address' },
      ],
      name: 'OnlyMarketOwner',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'kind',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'impl',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'AssociatedSystemSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'nominee',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'MarketNominationRenounced',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'MarketOwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'MarketOwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'SynthImplementationUpgraded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
        {
          name: 'buyFeedId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'sellFeedId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
      ],
      name: 'SynthPriceDataUpdated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'synthMarketId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'SynthRegistered',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'acceptMarketOwnership',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'synthOwner', internalType: 'address', type: 'address' },
      ],
      name: 'createSynth',
      outputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getAssociatedSystem',
      outputs: [
        { name: 'addr', internalType: 'address', type: 'address' },
        { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'getMarketOwner',
      outputs: [
        { name: 'marketOwner', internalType: 'address', type: 'address' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getSynth',
      outputs: [
        { name: 'synthAddress', internalType: 'address', type: 'address' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getSynthImpl',
      outputs: [
        { name: 'implAddress', internalType: 'address', type: 'address' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeNft',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeToken',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'minimumCredit',
      outputs: [
        { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'name',
      outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateMarketOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'endpoint', internalType: 'address', type: 'address' },
      ],
      name: 'registerUnmanagedSystem',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'renounceMarketNomination',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'reportedDebt',
      outputs: [
        {
          name: 'reportedDebtAmount',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'rate', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setDecayRate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'synthImplementation',
          internalType: 'address',
          type: 'address',
        },
      ],
      name: 'setSynthImplementation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'synthetix',
          internalType: 'contract ISynthetixSystem',
          type: 'address',
        },
      ],
      name: 'setSynthetix',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
      name: 'supportsInterface',
      outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
        { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'updatePriceData',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'upgradeSynthImpl',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketFactoryModuleAddress =
  '0x2bb21b684E1C92B5C43941037AEdb3910c4caEe1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketFactoryModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketFactoryModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketFactoryModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/SpotMarketProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/SpotMarketRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketRouterAddress =
  '0x8E66469c2c4645Cd92D3Ea1286fe166A8CE06235' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketRouterConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSpotMarketRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/SynthRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthRouterAddress =
  '0x609a6388FD42fB830E1385de35FAaBA89b9c58ac' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthRouterConfig = {
  address: synthetixSandboxLocalPerpsMarketSpotMarketSynthRouterAddress,
  abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/SynthTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthTokenModuleAddress =
  '0x1Dd886387faFA69f70a03Fc1C36A85FB7296780A' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthTokenModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketSynthTokenModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthTokenModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/WrapperModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketWrapperModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketWrapperModuleAddress =
  '0xf7CC3aB05a3C043a62d5aa35D9C91f6c15810b21' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketWrapperModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSpotMarketWrapperModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSpotMarketWrapperModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AccountModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'InvalidAccountId',
    },
    {
      type: 'error',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'InvalidPermission',
    },
    {
      type: 'error',
      inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
      name: 'OnlyAccountTokenProxy',
    },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionNotGranted',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'AccountCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'permission',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'user',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'PermissionGranted',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'permission',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'user',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'PermissionRevoked',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'createAccount',
      outputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'requestedAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
      ],
      name: 'createAccount',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountLastInteraction',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountPermissions',
      outputs: [
        {
          name: 'accountPerms',
          internalType: 'struct IAccountModule.AccountPermissions[]',
          type: 'tuple[]',
          components: [
            { name: 'user', internalType: 'address', type: 'address' },
            {
              name: 'permissions',
              internalType: 'bytes32[]',
              type: 'bytes32[]',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getAccountTokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'grantPermission',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'hasPermission',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'isAuthorized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'notifyAccountTransfer',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'renouncePermission',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'revokePermission',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountModuleAddress =
  '0x7B297293Ee3267869920eAFBB9346f716233B2d2' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AccountProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'CannotSelfApprove',
    },
    {
      type: 'error',
      inputs: [
        { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
        { name: 'length', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'IndexOverrun',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidOwner',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidTransferRecipient',
    },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenAlreadyMinted',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenDoesNotExist',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Approval',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'operator',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'bool',
          type: 'bool',
          indexed: false,
        },
      ],
      name: 'ApprovalForAll',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'from',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        { name: 'to', internalType: 'address', type: 'address', indexed: true },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Transfer',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'burn',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'getApproved',
      outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
      ],
      name: 'initialize',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'holder', internalType: 'address', type: 'address' },
        { name: 'operator', internalType: 'address', type: 'address' },
      ],
      name: 'isApprovedForAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'isInitialized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mint',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'ownerOf',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeMint',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'spender', internalType: 'address', type: 'address' },
      ],
      name: 'setAllowance',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'operator', internalType: 'address', type: 'address' },
        { name: 'approved', internalType: 'bool', type: 'bool' },
      ],
      name: 'setApprovalForAll',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
      name: 'setBaseTokenURI',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
      name: 'supportsInterface',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'owner', internalType: 'address', type: 'address' },
        { name: 'index', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'tokenOfOwnerByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenURI',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AccountRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountRouterABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'CannotSelfApprove',
    },
    {
      type: 'error',
      inputs: [
        { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
        { name: 'length', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'IndexOverrun',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidOwner',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidTransferRecipient',
    },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenAlreadyMinted',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenDoesNotExist',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Approval',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'operator',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'bool',
          type: 'bool',
          indexed: false,
        },
      ],
      name: 'ApprovalForAll',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'from',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        { name: 'to', internalType: 'address', type: 'address', indexed: true },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Transfer',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'burn',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'getApproved',
      outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
      ],
      name: 'initialize',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'holder', internalType: 'address', type: 'address' },
        { name: 'operator', internalType: 'address', type: 'address' },
      ],
      name: 'isApprovedForAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'isInitialized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mint',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'ownerOf',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeMint',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'spender', internalType: 'address', type: 'address' },
      ],
      name: 'setAllowance',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'operator', internalType: 'address', type: 'address' },
        { name: 'approved', internalType: 'bool', type: 'bool' },
      ],
      name: 'setApprovalForAll',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
      name: 'setBaseTokenURI',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
      name: 'supportsInterface',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'owner', internalType: 'address', type: 'address' },
        { name: 'index', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'tokenOfOwnerByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenURI',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountRouterAddress =
  '0x9e7466C17e72Ec057CF8c5454c7F15cF5529BD03' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountRouterConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AccountTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountTokenModuleABI =
  [
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'CannotSelfApprove',
    },
    {
      type: 'error',
      inputs: [
        { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
        { name: 'length', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'IndexOverrun',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidOwner',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'InvalidTransferRecipient',
    },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenAlreadyMinted',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
      name: 'TokenDoesNotExist',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Approval',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'operator',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'approved',
          internalType: 'bool',
          type: 'bool',
          indexed: false,
        },
      ],
      name: 'ApprovalForAll',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'from',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        { name: 'to', internalType: 'address', type: 'address', indexed: true },
        {
          name: 'tokenId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: true,
        },
      ],
      name: 'Transfer',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'burn',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'getApproved',
      outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
      ],
      name: 'initialize',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'holder', internalType: 'address', type: 'address' },
        { name: 'operator', internalType: 'address', type: 'address' },
      ],
      name: 'isApprovedForAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'isInitialized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mint',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'ownerOf',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeMint',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'data', internalType: 'bytes', type: 'bytes' },
      ],
      name: 'safeTransferFrom',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        { name: 'spender', internalType: 'address', type: 'address' },
      ],
      name: 'setAllowance',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'operator', internalType: 'address', type: 'address' },
        { name: 'approved', internalType: 'bool', type: 'bool' },
      ],
      name: 'setApprovalForAll',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
      name: 'setBaseTokenURI',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
      name: 'supportsInterface',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'owner', internalType: 'address', type: 'address' },
        { name: 'index', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'tokenOfOwnerByIndex',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
      name: 'tokenURI',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountTokenModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountTokenModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAccountTokenModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AssociateDebtModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociateDebtModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint256', type: 'uint256' },
        { name: 'poolId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'NotFundedByPool',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'updatedDebt',
          internalType: 'int256',
          type: 'int256',
          indexed: false,
        },
      ],
      name: 'DebtAssociated',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'associateDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociateDebtModuleAddress =
  '0x921e58D6d38A34Fb641FE164604cAC1439C6433b' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociateDebtModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociateDebtModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociateDebtModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/AssociatedSystemsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociatedSystemsModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'MissingAssociatedSystem',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'kind',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'impl',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'AssociatedSystemSet',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getAssociatedSystem',
      outputs: [
        { name: 'addr', internalType: 'address', type: 'address' },
        { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeNft',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeToken',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'endpoint', internalType: 'address', type: 'address' },
      ],
      name: 'registerUnmanagedSystem',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociatedSystemsModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociatedSystemsModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixAssociatedSystemsModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/CollateralConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
      ],
      name: 'CollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'configureCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
      name: 'getCollateralConfigurations',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/CollateralMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralMockABI =
  [
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAllowance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientBalance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'spender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'Approval',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'from',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        { name: 'to', internalType: 'address', type: 'address', indexed: true },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'Transfer',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'owner', internalType: 'address', type: 'address' },
        { name: 'spender', internalType: 'address', type: 'address' },
      ],
      name: 'allowance',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
      name: 'burn',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'decimals',
      outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'decreaseAllowance',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'increaseAllowance',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'initialize',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'recipient', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mint',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transfer',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralMockConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralMockAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralMockABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/CollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
        { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'AccountActivityTimeoutPending',
    },
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'FailedTransfer',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
      name: 'InsufficientAccountCollateral',
    },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAllowance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'expireTimestamp',
          internalType: 'uint64',
          type: 'uint64',
          indexed: false,
        },
      ],
      name: 'CollateralLockCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'expireTimestamp',
          internalType: 'uint64',
          type: 'uint64',
          indexed: false,
        },
      ],
      name: 'CollateralLockExpired',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'Deposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'Withdrawn',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'offset', internalType: 'uint256', type: 'uint256' },
        { name: 'count', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'cleanExpiredLocks',
      outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'createLock',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'deposit',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getAccountAvailableCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getAccountCollateral',
      outputs: [
        { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
        { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
        { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'offset', internalType: 'uint256', type: 'uint256' },
        { name: 'count', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'getLocks',
      outputs: [
        {
          name: 'locks',
          internalType: 'struct CollateralLock.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'lockExpirationTime',
              internalType: 'uint64',
              type: 'uint64',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdraw',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralModuleAddress =
  '0x71Fd7c7d3Dd908f5BE24bfe1C56212482D903e33' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCollateralModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/CoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/CoreRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreRouterABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'allowAll',
          internalType: 'bool',
          type: 'bool',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowAllSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'account',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowlistAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'account',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowlistRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'deniers',
          internalType: 'address[]',
          type: 'address[]',
          indexed: false,
        },
      ],
      name: 'FeatureFlagDeniersReset',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
      ],
      name: 'FeatureFlagDenyAllSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'addToFeatureFlagAllowlist',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getDeniers',
      outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagAllowAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagAllowlist',
      outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagDenyAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'isFeatureAllowed',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'removeFromFeatureFlagAllowlist',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'deniers', internalType: 'address[]', type: 'address[]' },
      ],
      name: 'setDeniers',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'allowAll', internalType: 'bool', type: 'bool' },
      ],
      name: 'setFeatureFlagAllowAll',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'denyAll', internalType: 'bool', type: 'bool' },
      ],
      name: 'setFeatureFlagDenyAll',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'InvalidAccountId',
    },
    {
      type: 'error',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'InvalidPermission',
    },
    {
      type: 'error',
      inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
      name: 'OnlyAccountTokenProxy',
    },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionNotGranted',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'AccountCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'permission',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'user',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'PermissionGranted',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'permission',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'user',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'PermissionRevoked',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'createAccount',
      outputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'requestedAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
      ],
      name: 'createAccount',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountLastInteraction',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'getAccountPermissions',
      outputs: [
        {
          name: 'accountPerms',
          internalType: 'struct IAccountModule.AccountPermissions[]',
          type: 'tuple[]',
          components: [
            { name: 'user', internalType: 'address', type: 'address' },
            {
              name: 'permissions',
              internalType: 'bytes32[]',
              type: 'bytes32[]',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getAccountTokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'grantPermission',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'hasPermission',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'isAuthorized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'notifyAccountTransfer',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'renouncePermission',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'user', internalType: 'address', type: 'address' },
      ],
      name: 'revokePermission',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint256', type: 'uint256' },
        { name: 'poolId', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'NotFundedByPool',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'updatedDebt',
          internalType: 'int256',
          type: 'int256',
          indexed: false,
        },
      ],
      name: 'DebtAssociated',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'associateDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'MissingAssociatedSystem',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'kind',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'impl',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'AssociatedSystemSet',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getAssociatedSystem',
      outputs: [
        { name: 'addr', internalType: 'address', type: 'address' },
        { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeNft',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeToken',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'endpoint', internalType: 'address', type: 'address' },
      ],
      name: 'registerUnmanagedSystem',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
        { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'AccountActivityTimeoutPending',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'FailedTransfer',
    },
    {
      type: 'error',
      inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
      name: 'InsufficientAccountCollateral',
    },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAllowance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'expireTimestamp',
          internalType: 'uint64',
          type: 'uint64',
          indexed: false,
        },
      ],
      name: 'CollateralLockCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'expireTimestamp',
          internalType: 'uint64',
          type: 'uint64',
          indexed: false,
        },
      ],
      name: 'CollateralLockExpired',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'Deposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'Withdrawn',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'offset', internalType: 'uint256', type: 'uint256' },
        { name: 'count', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'cleanExpiredLocks',
      outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'createLock',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'deposit',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getAccountAvailableCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getAccountCollateral',
      outputs: [
        { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
        { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
        { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'offset', internalType: 'uint256', type: 'uint256' },
        { name: 'count', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'getLocks',
      outputs: [
        {
          name: 'locks',
          internalType: 'struct CollateralLock.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'lockExpirationTime',
              internalType: 'uint64',
              type: 'uint64',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdraw',
      outputs: [],
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
      ],
      name: 'CollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'configureCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
      name: 'getCollateralConfigurations',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      type: 'error',
      inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
      name: 'InsufficientDebt',
    },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'UsdBurned',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'UsdMinted',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'burnUsd',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mintUsd',
      outputs: [],
    },
    { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'int256', type: 'int256' },
        { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
        { name: 'cratio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'IneligibleForLiquidation',
    },
    { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
    { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Liquidation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'VaultLiquidation',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'isPositionLiquidatable',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'isVaultLiquidatable',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
      ],
      name: 'liquidate',
      outputs: [
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
        { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'liquidateVault',
      outputs: [
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToDeposit',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralDepositable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToWithdraw',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralWithdrawable',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'systemAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MaximumMarketCollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'configureMaximumMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMarketCollateralAmount',
      outputs: [
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMaximumMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketCollateral',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
      name: 'IncorrectMarketInterface',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'NotEnoughLiquidity',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketRegistered',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'target',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketUsdDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'target',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketUsdWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'minLiquidityRatio',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'SetMarketMinLiquidityRatio',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'minDelegateTime',
          internalType: 'uint32',
          type: 'uint32',
          indexed: false,
        },
      ],
      name: 'SetMinDelegateTime',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketUsd',
      outputs: [
        { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'distributeDebtToPools',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketDebtPerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'getMarketFees',
      outputs: [
        { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketMinDelegateTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketNetIssuance',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketReportedDebt',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketTotalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMinLiquidityRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getOracleManager',
      outputs: [
        { name: '', internalType: 'contract IOracleManager', type: 'address' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getUsdToken',
      outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getWithdrawableMarketUsd',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'isMarketCapacityLocked',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
      name: 'registerMarket',
      outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'setMarketMinDelegateTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setMinLiquidityRatio',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketUsd',
      outputs: [
        { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'payable',
      type: 'function',
      inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
      name: 'multicall',
      outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PreferredPoolSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'addApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getApprovedPools',
      outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getPreferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'removeApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'setPreferredPool',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
      name: 'CapacityLocked',
    },
    {
      type: 'error',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'MinDelegationTimeoutPending',
    },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolAlreadyExists',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'markets',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolConfigurationSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'name',
          internalType: 'string',
          type: 'string',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNameUpdated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNominationRenounced',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNominationRevoked',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'nominatedOwner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolOwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolOwnershipAccepted',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'minLiquidityRatio',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'SetMinLiquidityRatio',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'acceptPoolOwnership',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
        { name: 'owner', internalType: 'address', type: 'address' },
      ],
      name: 'createPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getMinLiquidityRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getNominatedPoolOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolName',
      outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'nominatedOwner', internalType: 'address', type: 'address' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'nominatePoolOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'renouncePoolNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'revokePoolNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setMinLiquidityRatio',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'newMarketConfigurations',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
        },
      ],
      name: 'setPoolConfiguration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'name', internalType: 'string', type: 'string' },
      ],
      name: 'setPoolName',
      outputs: [],
    },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'RewardUnavailable',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsClaimed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'start',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'duration',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsDistributed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRegistered',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRemoved',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'claimRewards',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'start', internalType: 'uint64', type: 'uint64' },
        { name: 'duration', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'distributeRewards',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'getRewardRate',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'registerRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'removeRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'updateRewards',
      outputs: [
        { name: '', internalType: 'uint256[]', type: 'uint256[]' },
        { name: '', internalType: 'address[]', type: 'address[]' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'oracleManagerAddress',
          internalType: 'address',
          type: 'address',
        },
      ],
      name: 'configureOracleManager',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getConfig',
      outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'ccipSend', internalType: 'address', type: 'address' },
        { name: 'ccipReceive', internalType: 'address', type: 'address' },
        { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
      ],
      name: 'registerCcip',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'k', internalType: 'bytes32', type: 'bytes32' },
        { name: 'v', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'setConfig',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
    {
      type: 'error',
      inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
      name: 'InvalidLeverage',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'leverage',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'DelegationUpdated',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'newCollateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'delegateCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPosition',
      outputs: [
        { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'int256', type: 'int256' },
        {
          name: 'collateralizationRatio',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionCollateral',
      outputs: [
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultCollateral',
      outputs: [
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreRouterAddress =
  '0x9d3a66B8ADC9010eE62C74fF5ce62E263e081320' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreRouterConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixCoreRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixFeatureFlagModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'allowAll',
          internalType: 'bool',
          type: 'bool',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowAllSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'account',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowlistAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'account',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'FeatureFlagAllowlistRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        {
          name: 'deniers',
          internalType: 'address[]',
          type: 'address[]',
          indexed: false,
        },
      ],
      name: 'FeatureFlagDeniersReset',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'feature',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
      ],
      name: 'FeatureFlagDenyAllSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'addToFeatureFlagAllowlist',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getDeniers',
      outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagAllowAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagAllowlist',
      outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getFeatureFlagDenyAll',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'isFeatureAllowed',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'account', internalType: 'address', type: 'address' },
      ],
      name: 'removeFromFeatureFlagAllowlist',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'deniers', internalType: 'address[]', type: 'address[]' },
      ],
      name: 'setDeniers',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'allowAll', internalType: 'bool', type: 'bool' },
      ],
      name: 'setFeatureFlagAllowAll',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
        { name: 'denyAll', internalType: 'bool', type: 'bool' },
      ],
      name: 'setFeatureFlagDenyAll',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixFeatureFlagModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixFeatureFlagModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixFeatureFlagModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/InitialCoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialCoreProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialCoreProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialCoreProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialCoreProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/InitialModuleBundle.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialModuleBundleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialModuleBundleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialModuleBundleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixInitialModuleBundleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/IssueUSDModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixIssueUsdModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
      name: 'InsufficientDebt',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'UsdBurned',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'UsdMinted',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'burnUsd',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mintUsd',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixIssueUsdModuleAddress =
  '0x7a726a60502e03B8F41ecF622404305Bc73e596f' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixIssueUsdModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixIssueUsdModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixIssueUsdModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/LiquidationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixLiquidationModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'int256', type: 'int256' },
        { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
        { name: 'cratio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'IneligibleForLiquidation',
    },
    { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Liquidation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'VaultLiquidation',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'isPositionLiquidatable',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'isVaultLiquidatable',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
      ],
      name: 'liquidate',
      outputs: [
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'liquidateAsAccountId',
          internalType: 'uint128',
          type: 'uint128',
        },
        { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'liquidateVault',
      outputs: [
        {
          name: 'liquidationData',
          internalType: 'struct ILiquidationModule.LiquidationData',
          type: 'tuple',
          components: [
            {
              name: 'debtLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'collateralLiquidated',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'amountRewarded',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixLiquidationModuleAddress =
  '0xf2b253bE26619F380618C3550f0d59Bd46bC6cb2' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixLiquidationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixLiquidationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixLiquidationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/MarketCollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketCollateralModuleABI =
  [
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'FailedTransfer',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToDeposit',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralDepositable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToWithdraw',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralWithdrawable',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'systemAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MaximumMarketCollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'configureMaximumMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMarketCollateralAmount',
      outputs: [
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMaximumMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketCollateral',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketCollateralModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketCollateralModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketCollateralModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/MarketManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketManagerModuleABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
      name: 'IncorrectMarketInterface',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'NotEnoughLiquidity',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketRegistered',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'target',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketUsdDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'target',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'market',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketUsdWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'minLiquidityRatio',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'SetMarketMinLiquidityRatio',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'minDelegateTime',
          internalType: 'uint32',
          type: 'uint32',
          indexed: false,
        },
      ],
      name: 'SetMinDelegateTime',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketUsd',
      outputs: [
        { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'distributeDebtToPools',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketDebtPerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '', internalType: 'uint128', type: 'uint128' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'getMarketFees',
      outputs: [
        { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketMinDelegateTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketNetIssuance',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketReportedDebt',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketTotalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMinLiquidityRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getOracleManager',
      outputs: [
        { name: '', internalType: 'contract IOracleManager', type: 'address' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getUsdToken',
      outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getWithdrawableMarketUsd',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'isMarketCapacityLocked',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
      name: 'registerMarket',
      outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'setMarketMinDelegateTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setMinLiquidityRatio',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketUsd',
      outputs: [
        { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketManagerModuleAddress =
  '0xaf95fA6F2016a2E5280E1c146634DE0e48BB557C' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketManagerModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketManagerModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMarketManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/MulticallModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMulticallModuleABI =
  [
    {
      stateMutability: 'payable',
      type: 'function',
      inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
      name: 'multicall',
      outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMulticallModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMulticallModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixMulticallModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/PoolConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PreferredPoolSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'addApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getApprovedPools',
      outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getPreferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'removeApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'setPreferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolConfigurationModuleAddress =
  '0xac99e8865Ab41a4DC7bD4b3091850Acb76D10dc1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/PoolModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
      name: 'CapacityLocked',
    },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'MinDelegationTimeoutPending',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolAlreadyExists',
    },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'markets',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolConfigurationSet',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolCreated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'name',
          internalType: 'string',
          type: 'string',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNameUpdated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNominationRenounced',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolNominationRevoked',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'nominatedOwner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolOwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'PoolOwnershipAccepted',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'minLiquidityRatio',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'SetMinLiquidityRatio',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'acceptPoolOwnership',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
        { name: 'owner', internalType: 'address', type: 'address' },
      ],
      name: 'createPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getMinLiquidityRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getNominatedPoolOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolName',
      outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'getPoolOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'nominatedOwner', internalType: 'address', type: 'address' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'nominatePoolOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'renouncePoolNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'revokePoolNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setMinLiquidityRatio',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'newMarketConfigurations',
          internalType: 'struct MarketConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'marketId', internalType: 'uint128', type: 'uint128' },
            { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
            {
              name: 'maxDebtShareValueD18',
              internalType: 'int128',
              type: 'int128',
            },
          ],
        },
      ],
      name: 'setPoolConfiguration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'name', internalType: 'string', type: 'string' },
      ],
      name: 'setPoolName',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolModuleAddress =
  '0x28f1d1052d4eD8F4c1E8393CC2499aC633AFCbEd' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixPoolModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/RewardsManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixRewardsManagerModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'RewardUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsClaimed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'start',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'duration',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsDistributed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRegistered',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRemoved',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'claimRewards',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'start', internalType: 'uint64', type: 'uint64' },
        { name: 'duration', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'distributeRewards',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'getRewardRate',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'registerRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'removeRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'updateRewards',
      outputs: [
        { name: '', internalType: 'uint256[]', type: 'uint256[]' },
        { name: '', internalType: 'address[]', type: 'address[]' },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixRewardsManagerModuleAddress =
  '0x0bbA03e5C1eA08e62C319Db635bB7ae5f10F0250' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixRewardsManagerModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixRewardsManagerModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixRewardsManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableAccountRBACStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountRbacStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'InvalidPermission',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_authorized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'AccountRBAC_get_owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_grantPermission',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_hasPermission',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'AccountRBAC_isPermissionValid',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_revokeAllPermissions',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_revokePermission',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_setOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_set_owner',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountRbacStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountRbacStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountRbacStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableAccountStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAccountCollateral',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getAssignedCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getCollateralTotals',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slot2AvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_lastInteraction',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_recordInteraction',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Account_requireSufficientCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set___slot2AvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set_lastInteraction',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableAccountStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableCollateralConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_collateralEnabled',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_convertTokenToSystemAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_depositingEnabled',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_issuanceRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRewardD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_minDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_oracleNodeId',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_tokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_requireSufficientDelegation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'CollateralConfiguration_set',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bool', type: 'bool' },
      ],
      name: 'CollateralConfiguration_set_depositingEnabled',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_issuanceRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRewardD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_minDelegationD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'CollateralConfiguration_set_oracleNodeId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_set_tokenAddress',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
        {
          name: 'collateralValueD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'CollateralConfiguration_verifyIssuanceRatio',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableCollateralLockStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralLockStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_amountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_lockExpirationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'CollateralLock_set_amountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'CollateralLock_set_lockExpirationTime',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralLockStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralLockStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralLockStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableCollateralStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_decreaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_getTotalLocked',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_get_amountAvailableForDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_increaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_set_amountAvailableForDelegationD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableCollateralStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableDistributionActorStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionActorStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_lastValuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'DistributionActor_set_lastValuePerShareD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'DistributionActor_set_sharesD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionActorStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionActorStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionActorStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_accumulateActor',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'Distribution_distributeValue',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorShares',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorValueChange',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_getValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_valuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Distribution_setActorShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'Distribution_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'Distribution_set_valuePerShareD27',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableMarketConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_marketId',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_maxDebtShareValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_weightD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_marketId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'MarketConfiguration_set_maxDebtShareValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_weightD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableMarketPoolInfoStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_creditCapacityAmountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_pendingDebtD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_creditCapacityAmountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_pendingDebtD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketPoolInfoStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableMarketStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market__testOnly_getOutstandingDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_inRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_outRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        {
          name: 'newPoolMaxShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_adjustPoolShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_bumpPools',
      outputs: [
        { name: '', internalType: 'int256', type: 'int256' },
        { name: '', internalType: 'bool', type: 'bool' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_distributeDebtToPools',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'creditCapacitySharesD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Market_getCreditCapacityContribution',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDebtPerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDepositedCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getLockedCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_getPoolCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getReportedDebt',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'valueToDistributeD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_getTargetValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater1',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater2',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater3',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater4',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_creditCapacityD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_lastDistributedMarketBalanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_marketAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
      ],
      name: 'Market_get_maximumDepositableD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minDelegateTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_netIssuanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_isCapacityLocked',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'maxDebtShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'Market_rebalancePools',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set___reservedForLater1',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater2',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater3',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater4',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_creditCapacityD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_lastDistributedMarketBalanceD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'Market_set_marketAddress',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_maximumDepositableD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set_minDelegateTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_netIssuanceD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableMarketStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestablePoolStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestablePoolStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'MinDelegationTimeoutPending',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_currentAccountCollateral',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_currentAccountCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_currentVaultCollateral',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_currentVaultCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_currentVaultDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_distributeDebtToVaults',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_getRequiredMinDelegationTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'minLiquidityRatioD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Pool_getSystemMaxValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get___reserved1',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get___reserved2',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get___reserved3',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_lastConfigurationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_totalVaultDebtsD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Pool_get_totalWeightsD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_hasMarket',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'caller', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_onlyPoolOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_recalculateVaultCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Pool_requireMinDelegationTimeElapsed',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_resetVault',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Pool_set___reserved1',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Pool_set___reserved2',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Pool_set___reserved3',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Pool_set_lastConfigurationTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'string', type: 'string' },
      ],
      name: 'Pool_set_name',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_set_nominatedOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'Pool_set_owner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Pool_set_totalVaultDebtsD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_set_totalWeightsD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Pool_updateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestablePoolStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestablePoolStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestablePoolStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableRewardDistributionClaimStatusStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableRewardDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_duration',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_lastUpdate',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_rewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_scheduledValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_start',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_duration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_lastUpdate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set_rewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'RewardDistribution_set_scheduledValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'RewardDistribution_set_start',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'totalSharesAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'RewardDistribution_updateEntry',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableRewardDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableScalableMappingStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableScalableMappingStorageABI =
  [
    { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
    { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'ScalableMapping_getSharesForAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_scaleModifierD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'ScalableMapping_scale',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'ScalableMapping_set_scaleModifierD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set_sharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'ScalableMapping_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_totalAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableScalableMappingStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableScalableMappingStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableScalableMappingStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableSystemPoolConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get___reservedForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_preferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set___reservedForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set_preferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableVaultEpochStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultEpochStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'amountD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_assignDebtToAccount',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_consolidateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'debtChangeD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_distributeDebtToAccounts',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_getAccountCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
      name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_get_lastDelegationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_totalConsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_unconsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint256', type: 'uint256' },
        { name: 'val', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'VaultEpoch_set_lastDelegationTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_totalConsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_unconsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'VaultEpoch_updateAccountPosition',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultEpochStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultEpochStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultEpochStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/TestableVaultStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'Vault_consolidateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'Vault_currentAccountCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_currentCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_currentDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'debtChangeD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Vault_distributeDebtToAccounts',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get_epoch',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get_prevTotalDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'Vault_reset',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Vault_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'Vault_set_epoch',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'Vault_set_prevTotalDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'collateralPriceD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'Vault_updateCreditCapacity',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'int256', type: 'int256' },
        { name: '', internalType: 'int256', type: 'int256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'Vault_updateReward',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Vault_updateRewards',
      outputs: [
        { name: '', internalType: 'uint256[]', type: 'uint256[]' },
        { name: '', internalType: 'address[]', type: 'address[]' },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixTestableVaultStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/USDProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdProxyConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/USDRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdRouterAddress =
  '0xa965116Edbda6f2e70b2dF83126A62Cdd38ef5e2' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdRouterConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/USDTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdTokenModuleABI =
  [
    { type: 'error', inputs: [], name: 'AlreadyInitialized' },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAllowance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'required', internalType: 'uint256', type: 'uint256' },
        { name: 'existing', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientBalance',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'spender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'Approval',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'from',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        { name: 'to', internalType: 'address', type: 'address', indexed: true },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'Transfer',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'owner', internalType: 'address', type: 'address' },
        { name: 'spender', internalType: 'address', type: 'address' },
      ],
      name: 'allowance',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'approve',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
      name: 'balanceOf',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'burn',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'burnWithAllowance',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'decimals',
      outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'decreaseAllowance',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'increaseAllowance',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'tokenName', internalType: 'string', type: 'string' },
        { name: 'tokenSymbol', internalType: 'string', type: 'string' },
        { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'initialize',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'isInitialized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'target', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'mint',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'name',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'spender', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'setAllowance',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'symbol',
      outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'totalSupply',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transfer',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferCrossChain',
      outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'transferFrom',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdTokenModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdTokenModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUsdTokenModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/UtilsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUtilsModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'oracleManagerAddress',
          internalType: 'address',
          type: 'address',
        },
      ],
      name: 'configureOracleManager',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getConfig',
      outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'ccipSend', internalType: 'address', type: 'address' },
        { name: 'ccipReceive', internalType: 'address', type: 'address' },
        { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
      ],
      name: 'registerCcip',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'k', internalType: 'bytes32', type: 'bytes32' },
        { name: 'v', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'setConfig',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUtilsModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUtilsModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixUtilsModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/VaultModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixVaultModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
      name: 'CapacityLocked',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAccountCollateral',
    },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
    {
      type: 'error',
      inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
      name: 'InvalidLeverage',
    },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    {
      type: 'error',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'MinDelegationTimeoutPending',
    },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'leverage',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'DelegationUpdated',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'newCollateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'leverage', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'delegateCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPosition',
      outputs: [
        { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'int256', type: 'int256' },
        {
          name: 'collateralizationRatio',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionCollateral',
      outputs: [
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getPositionDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultCollateral',
      outputs: [
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultCollateralRatio',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getVaultDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixVaultModuleAddress =
  '0xfF62f17821c2f4d1dC66bf2d35D2958BDC55bdE0' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixVaultModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixVaultModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixVaultModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/oracle_manager/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerCoreModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerCoreModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerCoreModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerCoreModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/oracle_manager/InitialProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerInitialProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerInitialProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerInitialProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerInitialProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/oracle_manager/NodeModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerNodeModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBf1Dd0f3d0c9849127992AC86eB79D188b7CA6E5' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerNodeModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerNodeModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerNodeModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/oracle_manager/OracleRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerOracleRouterABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerOracleRouterAddress =
  '0xA6941F3e91B2905eBE6CbC7869D412610db7B501' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerOracleRouterConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerOracleRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerOracleRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/spotMarket/synthetix/oracle_manager/Proxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSpotMarketSynthetixOracleManagerProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AccountModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixAccountModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AccountProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixAccountProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AccountRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountRouterConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixAccountRouterAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AccountTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAccountTokenModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSynthetixAccountTokenModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixAccountTokenModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AssociateDebtModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAssociateDebtModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixAssociateDebtModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixAssociateDebtModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/AssociatedSystemsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixAssociatedSystemsModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'MissingAssociatedSystem',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'kind',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'impl',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'AssociatedSystemSet',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getAssociatedSystem',
      outputs: [
        { name: 'addr', internalType: 'address', type: 'address' },
        { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeNft',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeToken',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'endpoint', internalType: 'address', type: 'address' },
      ],
      name: 'registerUnmanagedSystem',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const synthetixSandboxLocalPerpsMarketSynthetixAssociatedSystemsModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixAssociatedSystemsModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixAssociatedSystemsModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/CollateralConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
      ],
      name: 'CollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'configureCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
      name: 'getCollateralConfigurations',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixCollateralConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixCollateralConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/CollateralMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralMockConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixCollateralMockAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/CollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const synthetixSandboxLocalPerpsMarketSynthetixCollateralModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixCollateralModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/CoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalPerpsMarketSynthetixCoreProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixCoreProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/CoreRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const synthetixSandboxLocalPerpsMarketSynthetixCoreRouterConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixCoreRouterAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const synthetixSandboxLocalPerpsMarketSynthetixFeatureFlagModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSynthetixFeatureFlagModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixFeatureFlagModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/InitialCoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalPerpsMarketSynthetixInitialCoreProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixInitialCoreProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/InitialModuleBundle.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const synthetixSandboxLocalPerpsMarketSynthetixInitialModuleBundleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixInitialModuleBundleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixInitialModuleBundleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/IssueUSDModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const synthetixSandboxLocalPerpsMarketSynthetixIssueUsdModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixIssueUsdModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/LiquidationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const synthetixSandboxLocalPerpsMarketSynthetixLiquidationModuleConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSynthetixLiquidationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixLiquidationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/MarketCollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixMarketCollateralModuleABI =
  [
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'FailedTransfer',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToDeposit',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralDepositable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToWithdraw',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralWithdrawable',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'systemAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MaximumMarketCollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'configureMaximumMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMarketCollateralAmount',
      outputs: [
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMaximumMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketCollateral',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const synthetixSandboxLocalPerpsMarketSynthetixMarketCollateralModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixMarketCollateralModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixMarketCollateralModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/MarketManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const synthetixSandboxLocalPerpsMarketSynthetixMarketManagerModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixMarketManagerModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixMarketManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/MulticallModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const synthetixSandboxLocalPerpsMarketSynthetixMulticallModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixMulticallModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/PoolConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixPoolConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PreferredPoolSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'addApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getApprovedPools',
      outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getPreferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'removeApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'setPreferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const synthetixSandboxLocalPerpsMarketSynthetixPoolConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixPoolConfigurationModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixPoolConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/PoolModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const synthetixSandboxLocalPerpsMarketSynthetixPoolModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixPoolModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/RewardsManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixRewardsManagerModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'AccountNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      type: 'error',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'PermissionDenied',
    },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'RewardUnavailable',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'accountId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsClaimed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'amount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'start',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'duration',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'RewardsDistributed',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRegistered',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'distributor',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'RewardsDistributorRemoved',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'claimRewards',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
        { name: 'start', internalType: 'uint64', type: 'uint64' },
        { name: 'duration', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'distributeRewards',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'getRewardRate',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'registerRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'distributor', internalType: 'address', type: 'address' },
      ],
      name: 'removeRewardsDistributor',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'updateRewards',
      outputs: [
        { name: '', internalType: 'uint256[]', type: 'uint256[]' },
        { name: '', internalType: 'address[]', type: 'address[]' },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const synthetixSandboxLocalPerpsMarketSynthetixRewardsManagerModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixRewardsManagerModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixRewardsManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableAccountRBACStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountRbacStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'InvalidPermission',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_authorized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'AccountRBAC_get_owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_grantPermission',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_hasPermission',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'AccountRBAC_isPermissionValid',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_revokeAllPermissions',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_revokePermission',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_setOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_set_owner',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountRbacStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableAccountRbacStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableAccountRbacStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableAccountStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAccountCollateral',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getAssignedCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getCollateralTotals',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slot2AvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_lastInteraction',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_recordInteraction',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Account_requireSufficientCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set___slot2AvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set_lastInteraction',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableAccountStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableAccountStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableAccountStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableCollateralConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralConfigurationStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_collateralEnabled',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_convertTokenToSystemAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_depositingEnabled',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_issuanceRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRewardD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_minDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_oracleNodeId',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_tokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_requireSufficientDelegation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'CollateralConfiguration_set',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bool', type: 'bool' },
      ],
      name: 'CollateralConfiguration_set_depositingEnabled',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_issuanceRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRewardD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_minDelegationD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'CollateralConfiguration_set_oracleNodeId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_set_tokenAddress',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
        {
          name: 'collateralValueD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'CollateralConfiguration_verifyIssuanceRatio',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableCollateralLockStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralLockStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_amountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_lockExpirationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'CollateralLock_set_amountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'CollateralLock_set_lockExpirationTime',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralLockStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralLockStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralLockStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableCollateralStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_decreaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_getTotalLocked',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_get_amountAvailableForDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_increaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_set_amountAvailableForDelegationD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableCollateralStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableDistributionActorStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionActorStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_lastValuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'DistributionActor_set_lastValuePerShareD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'DistributionActor_set_sharesD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionActorStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionActorStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionActorStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_accumulateActor',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'Distribution_distributeValue',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorShares',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorValueChange',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_getValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_valuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Distribution_setActorShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'Distribution_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'Distribution_set_valuePerShareD27',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableMarketConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_marketId',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_maxDebtShareValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_weightD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_marketId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'MarketConfiguration_set_maxDebtShareValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_weightD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableMarketConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableMarketConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableMarketPoolInfoStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketPoolInfoStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_creditCapacityAmountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_pendingDebtD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_creditCapacityAmountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_pendingDebtD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketPoolInfoStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableMarketPoolInfoStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableMarketPoolInfoStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableMarketStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market__testOnly_getOutstandingDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_inRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_outRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        {
          name: 'newPoolMaxShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_adjustPoolShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_bumpPools',
      outputs: [
        { name: '', internalType: 'int256', type: 'int256' },
        { name: '', internalType: 'bool', type: 'bool' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_distributeDebtToPools',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'creditCapacitySharesD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Market_getCreditCapacityContribution',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDebtPerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDepositedCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getLockedCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_getPoolCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getReportedDebt',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'valueToDistributeD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_getTargetValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater1',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater2',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater3',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater4',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_creditCapacityD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_lastDistributedMarketBalanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_marketAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
      ],
      name: 'Market_get_maximumDepositableD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minDelegateTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_netIssuanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_isCapacityLocked',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'maxDebtShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'Market_rebalancePools',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set___reservedForLater1',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater2',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater3',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater4',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_creditCapacityD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_lastDistributedMarketBalanceD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'Market_set_marketAddress',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_maximumDepositableD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set_minDelegateTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_netIssuanceD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableMarketStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableMarketStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableMarketStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestablePoolStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestablePoolStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestablePoolStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestablePoolStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableRewardDistributionClaimStatusStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableRewardDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_duration',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_lastUpdate',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_rewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_scheduledValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_start',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_duration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_lastUpdate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set_rewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'RewardDistribution_set_scheduledValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'RewardDistribution_set_start',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'totalSharesAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'RewardDistribution_updateEntry',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableRewardDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableScalableMappingStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableScalableMappingStorageABI =
  [
    { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
    { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'ScalableMapping_getSharesForAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_scaleModifierD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'ScalableMapping_scale',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'ScalableMapping_set_scaleModifierD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set_sharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'ScalableMapping_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_totalAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableScalableMappingStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableScalableMappingStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableScalableMappingStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableSystemPoolConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableSystemPoolConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get___reservedForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_preferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set___reservedForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set_preferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableVaultEpochStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultEpochStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'amountD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_assignDebtToAccount',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_consolidateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'debtChangeD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_distributeDebtToAccounts',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_getAccountCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
      name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_get_lastDelegationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_totalConsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_unconsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint256', type: 'uint256' },
        { name: 'val', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'VaultEpoch_set_lastDelegationTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_totalConsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_unconsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'VaultEpoch_updateAccountPosition',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultEpochStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableVaultEpochStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableVaultEpochStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/TestableVaultStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'Vault_consolidateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'Vault_currentAccountCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_currentCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_currentDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'debtChangeD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Vault_distributeDebtToAccounts',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get_epoch',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Vault_get_prevTotalDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'Vault_reset',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Vault_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'Vault_set_epoch',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'Vault_set_prevTotalDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'collateralPriceD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'Vault_updateCreditCapacity',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'int256', type: 'int256' },
        { name: '', internalType: 'int256', type: 'int256' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'Vault_updateReward',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Vault_updateRewards',
      outputs: [
        { name: '', internalType: 'uint256[]', type: 'uint256[]' },
        { name: '', internalType: 'address[]', type: 'address[]' },
      ],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const synthetixSandboxLocalPerpsMarketSynthetixTestableVaultStorageConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixTestableVaultStorageAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixTestableVaultStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/USDProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdProxyConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixUsdProxyAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/USDRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdRouterConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixUsdRouterAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/USDTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const synthetixSandboxLocalPerpsMarketSynthetixUsdTokenModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixUsdTokenModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/UtilsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const synthetixSandboxLocalPerpsMarketSynthetixUtilsModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixUtilsModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/VaultModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const synthetixSandboxLocalPerpsMarketSynthetixVaultModuleConfig = {
  address: synthetixSandboxLocalPerpsMarketSynthetixVaultModuleAddress,
  abi: synthetixSandboxLocalPerpsMarketSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/oracle_manager/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerCoreModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerCoreModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixOracleManagerCoreModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerCoreModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/oracle_manager/InitialProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerInitialProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerInitialProxyConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixOracleManagerInitialProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerInitialProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/oracle_manager/NodeModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerNodeModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBf1Dd0f3d0c9849127992AC86eB79D188b7CA6E5' as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerNodeModuleConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixOracleManagerNodeModuleAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerNodeModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/oracle_manager/OracleRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerOracleRouterABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerOracleRouterAddress =
  '0xcdDEF040597b7566eC7645fD7be15f5e14a2F920' as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerOracleRouterConfig =
  {
    address:
      synthetixSandboxLocalPerpsMarketSynthetixOracleManagerOracleRouterAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerOracleRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/perpsMarket/synthetix/oracle_manager/Proxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalPerpsMarketSynthetixOracleManagerProxyConfig =
  {
    address: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerProxyAddress,
    abi: synthetixSandboxLocalPerpsMarketSynthetixOracleManagerProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/AsyncOrderConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketAsyncOrderConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketAsyncOrderConfigurationModuleAddress =
  '0x2507408706913e7622a412F527c3d8DCd5f4B5FA' as const

export const synthetixSandboxLocalSpotMarketAsyncOrderConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketAsyncOrderConfigurationModuleAddress,
    abi: synthetixSandboxLocalSpotMarketAsyncOrderConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/AsyncOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketAsyncOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketAsyncOrderModuleAddress =
  '0x6c276d7E22BEF9582daBccAD541D4579E51125c7' as const

export const synthetixSandboxLocalSpotMarketAsyncOrderModuleConfig = {
  address: synthetixSandboxLocalSpotMarketAsyncOrderModuleAddress,
  abi: synthetixSandboxLocalSpotMarketAsyncOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/AsyncOrderSettlementModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketAsyncOrderSettlementModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketAsyncOrderSettlementModuleAddress =
  '0xCAA259A502b35e578F3Ee0651a72c57CF5c22198' as const

export const synthetixSandboxLocalSpotMarketAsyncOrderSettlementModuleConfig = {
  address: synthetixSandboxLocalSpotMarketAsyncOrderSettlementModuleAddress,
  abi: synthetixSandboxLocalSpotMarketAsyncOrderSettlementModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/AtomicOrderModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketAtomicOrderModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketAtomicOrderModuleAddress =
  '0x6F25D9c2B1cd8F2abe4a1209BcF7A966b47Ed88C' as const

export const synthetixSandboxLocalSpotMarketAtomicOrderModuleConfig = {
  address: synthetixSandboxLocalSpotMarketAtomicOrderModuleAddress,
  abi: synthetixSandboxLocalSpotMarketAtomicOrderModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketCoreModuleAddress =
  '0xD8aAaD19E284C4481738d088A09A0f879dA8A3dF' as const

export const synthetixSandboxLocalSpotMarketCoreModuleConfig = {
  address: synthetixSandboxLocalSpotMarketCoreModuleAddress,
  abi: synthetixSandboxLocalSpotMarketCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketFeatureFlagModuleAddress =
  '0xD095c6fBd5Df38E37657a1B75bAC0Ec82D67A6Cb' as const

export const synthetixSandboxLocalSpotMarketFeatureFlagModuleConfig = {
  address: synthetixSandboxLocalSpotMarketFeatureFlagModuleAddress,
  abi: synthetixSandboxLocalSpotMarketFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/FeeCollectorMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketFeeCollectorMockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tradeType', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'quoteFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_usdToken',
        internalType: 'contract ITokenModule',
        type: 'address',
      },
    ],
    name: 'setUsdToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'usdToken',
    outputs: [
      { name: '', internalType: 'contract ITokenModule', type: 'address' },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketFeeCollectorMockAddress =
  '0x2710cCB2ce5F658099b0859fBf8d097DCDF30d62' as const

export const synthetixSandboxLocalSpotMarketFeeCollectorMockConfig = {
  address: synthetixSandboxLocalSpotMarketFeeCollectorMockAddress,
  abi: synthetixSandboxLocalSpotMarketFeeCollectorMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/InitialSpotMarketProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketInitialSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketInitialSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const synthetixSandboxLocalSpotMarketInitialSpotMarketProxyConfig = {
  address: synthetixSandboxLocalSpotMarketInitialSpotMarketProxyAddress,
  abi: synthetixSandboxLocalSpotMarketInitialSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/MarketConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketMarketConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketMarketConfigurationModuleAddress =
  '0x6C547498846770ed071E5dacA4F9f2A54F98229a' as const

export const synthetixSandboxLocalSpotMarketMarketConfigurationModuleConfig = {
  address: synthetixSandboxLocalSpotMarketMarketConfigurationModuleAddress,
  abi: synthetixSandboxLocalSpotMarketMarketConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/OracleVerifierMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketOracleVerifierMockABI = [
  { type: 'error', inputs: [], name: 'InsufficientFee' },
  { type: 'error', inputs: [], name: 'InvalidArgument' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceDataSource' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceMessage' },
  { type: 'error', inputs: [], name: 'InvalidGovernanceTarget' },
  { type: 'error', inputs: [], name: 'InvalidUpdateData' },
  { type: 'error', inputs: [], name: 'InvalidUpdateDataSource' },
  { type: 'error', inputs: [], name: 'InvalidWormholeVaa' },
  { type: 'error', inputs: [], name: 'NoFreshUpdate' },
  { type: 'error', inputs: [], name: 'OldGovernanceMessage' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFound' },
  { type: 'error', inputs: [], name: 'PriceFeedNotFoundWithinRange' },
  { type: 'error', inputs: [], name: 'StalePrice' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'updateDataSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUpdateFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'updateData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'priceIds', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'minPublishTime', internalType: 'uint64', type: 'uint64' },
      { name: 'maxPublishTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        name: 'priceFeeds',
        internalType: 'struct IPythVerifier.PriceFeed[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'price',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'emaPrice',
            internalType: 'struct IPythVerifier.Price',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'int64', type: 'int64' },
              { name: 'conf', internalType: 'uint64', type: 'uint64' },
              { name: 'expo', internalType: 'int32', type: 'int32' },
              { name: 'publishTime', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price',
    outputs: [{ name: '', internalType: 'int64', type: 'int64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newPrice', internalType: 'int64', type: 'int64' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'chainlinkBlob', internalType: 'bytes', type: 'bytes' }],
    name: 'verify',
    outputs: [
      { name: 'verifierResponse', internalType: 'bytes', type: 'bytes' },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketOracleVerifierMockAddress =
  '0x204eC246f58d06878AbAD54542712C40F918a5E1' as const

export const synthetixSandboxLocalSpotMarketOracleVerifierMockConfig = {
  address: synthetixSandboxLocalSpotMarketOracleVerifierMockAddress,
  abi: synthetixSandboxLocalSpotMarketOracleVerifierMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/SpotMarketFactoryModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSpotMarketFactoryModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSpotMarketFactoryModuleAddress =
  '0xf21672a052a3838F8dD70e6d1578Ff151bE99E22' as const

export const synthetixSandboxLocalSpotMarketSpotMarketFactoryModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSpotMarketFactoryModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSpotMarketFactoryModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/SpotMarketProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSpotMarketProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSpotMarketProxyAddress =
  '0x989B0B56511de4CE09510b319ACE4808b803Efa1' as const

export const synthetixSandboxLocalSpotMarketSpotMarketProxyConfig = {
  address: synthetixSandboxLocalSpotMarketSpotMarketProxyAddress,
  abi: synthetixSandboxLocalSpotMarketSpotMarketProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/SpotMarketRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSpotMarketRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  { type: 'error', inputs: [], name: 'InvalidMarketOwner' },
  {
    type: 'error',
    inputs: [
      { name: 'synthImplementation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidSynthImplementation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominee',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MarketOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthImplementationUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'buyFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'sellFeedId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'SynthPriceDataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SynthRegistered',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'acceptMarketOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'synthOwner', internalType: 'address', type: 'address' },
    ],
    name: 'createSynth',
    outputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getMarketOwner',
    outputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynth',
    outputs: [
      { name: 'synthAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getSynthImpl',
    outputs: [
      { name: 'implAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'minimumCredit',
    outputs: [
      { name: 'lockedAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'name',
    outputs: [{ name: 'marketName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateMarketOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'renounceMarketNomination',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'reportedDebt',
    outputs: [
      { name: 'reportedDebtAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'setSynthImplementation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'synthetix',
        internalType: 'contract ISynthetixSystem',
        type: 'address',
      },
    ],
    name: 'setSynthetix',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: 'isSupported', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'buyFeedId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sellFeedId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'updatePriceData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'upgradeSynthImpl',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'synthAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxSynthAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ExceedsMaxUsdAmount',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  { type: 'error', inputs: [], name: 'InvalidPrices' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'synthReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthBought',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountReturned',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SynthSold',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buy',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'buyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactIn',
    outputs: [
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteBuyExactOut',
    outputs: [
      { name: 'usdAmountCharged', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteSellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minUsdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sell',
    outputs: [
      { name: 'usdAmountReceived', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'synthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactIn',
    outputs: [
      { name: 'returnAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'usdAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSynthAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'sellExactOut',
    outputs: [
      { name: 'synthToBurn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForCancellation',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientSharesAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'transactionType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
    ],
    name: 'InvalidAsyncTransactionType',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidClaim',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minimumAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InvalidCommitmentAmount',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InvalidSettlementStrategy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'asyncOrderId', internalType: 'uint256', type: 'uint256' },
      { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OrderAlreadySettled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'amountProvided',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OrderCommitted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'cancelOrder',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'orderType',
        internalType: 'enum Transaction.Type',
        type: 'uint8',
      },
      { name: 'amountProvided', internalType: 'uint256', type: 'uint256' },
      {
        name: 'settlementStrategyId',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'minimumSettlementAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'referrer', internalType: 'address', type: 'address' },
    ],
    name: 'commitOrder',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'getAsyncOrderClaim',
    outputs: [
      {
        name: 'asyncOrderClaim',
        internalType: 'struct AsyncOrderClaim.Data',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint128', type: 'uint128' },
          { name: 'owner', internalType: 'address', type: 'address' },
          {
            name: 'orderType',
            internalType: 'enum Transaction.Type',
            type: 'uint8',
          },
          { name: 'amountEscrowed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementStrategyId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settlementTime', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumSettlementAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'settledAt', internalType: 'uint256', type: 'uint256' },
          { name: 'referrer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidVerificationResponse' },
  {
    type: 'error',
    inputs: [
      { name: 'minimum', internalType: 'uint256', type: 'uint256' },
      { name: 'actual', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'MinimumSettlementAmountNotMet',
  },
  {
    type: 'error',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'urls', internalType: 'string[]', type: 'string[]' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'callbackFunction', internalType: 'bytes4', type: 'bytes4' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'OffchainLookup',
  },
  {
    type: 'error',
    inputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
      { name: 'expirationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'OutsideSettlementWindow',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'deviation', internalType: 'uint256', type: 'uint256' },
      { name: 'tolerance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'PriceDeviationToleranceExceeded',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'strategyType',
        internalType: 'enum SettlementStrategy.Type',
        type: 'uint8',
      },
    ],
    name: 'SettlementStrategyNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'asyncOrderId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'finalOrderAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'collectedFees',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'settler',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OrderSettled',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRECISION',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncOrderId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'settleOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'result', internalType: 'bytes', type: 'bytes' },
      { name: 'extraData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'settlePythOrder',
    outputs: [
      { name: 'finalOrderAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SettlementStrategyAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'strategyId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'SettlementStrategyUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'strategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    name: 'addSettlementStrategy',
    outputs: [{ name: 'strategyId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSettlementStrategy',
    outputs: [
      {
        name: 'settlementStrategy',
        internalType: 'struct SettlementStrategy.Data',
        type: 'tuple',
        components: [
          {
            name: 'strategyType',
            internalType: 'enum SettlementStrategy.Type',
            type: 'uint8',
          },
          { name: 'settlementDelay', internalType: 'uint256', type: 'uint256' },
          {
            name: 'settlementWindowDuration',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceVerificationContract',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feedId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'url', internalType: 'string', type: 'string' },
          {
            name: 'settlementReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'priceDeviationTolerance',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'minimumUsdExchangeAmount',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxRoundingLoss', internalType: 'uint256', type: 'uint256' },
          { name: 'disabled', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'strategyId', internalType: 'uint256', type: 'uint256' },
      { name: 'enabled', internalType: 'bool', type: 'bool' },
    ],
    name: 'setSettlementStrategyEnabled',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidCollateralLeverage',
  },
  {
    type: 'error',
    inputs: [
      { name: 'invalidFeeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'InvalidFeeCollectorInterface',
  },
  { type: 'error', inputs: [], name: 'InvalidWrapperFees' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'asyncFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AsyncFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'atomicFixedFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AtomicFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'collateralLeverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralLeverageSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeCollector',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeeCollectorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'skewScale',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSkewScaleSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'utilizationFeeRate',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketUtilizationFeesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'referrer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'sharePercentage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReferrerShareUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fixedFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactorFixedFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'unwrapFee',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'WrapperFeesSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'asyncFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAsyncFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'atomicFixedFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAtomicFixedFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCollateralLeverage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'transactor', internalType: 'address', type: 'address' },
      { name: 'fixedFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCustomTransactorFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'feeCollector', internalType: 'address', type: 'address' },
    ],
    name: 'setFeeCollector',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketSkewScale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'utilizationFeeRate', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMarketUtilizationFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapFee', internalType: 'int256', type: 'int256' },
      { name: 'unwrapFee', internalType: 'int256', type: 'int256' },
    ],
    name: 'setWrapperFees',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'synthMarketId', internalType: 'uint128', type: 'uint128' },
      { name: 'referrer', internalType: 'address', type: 'address' },
      { name: 'sharePercentage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateReferrerShare',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSpotMarketRouterAddress =
  '0xe3e873e3D42FB2556ff6e94CC9d071373367B0aB' as const

export const synthetixSandboxLocalSpotMarketSpotMarketRouterConfig = {
  address: synthetixSandboxLocalSpotMarketSpotMarketRouterAddress,
  abi: synthetixSandboxLocalSpotMarketSpotMarketRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/SynthRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthRouterAddress =
  '0xF63c4a1fe26b66fB2880A51aAE16A108a1155f18' as const

export const synthetixSandboxLocalSpotMarketSynthRouterConfig = {
  address: synthetixSandboxLocalSpotMarketSynthRouterAddress,
  abi: synthetixSandboxLocalSpotMarketSynthRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/SynthTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  { type: 'error', inputs: [], name: 'InvalidDecayRate' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'advanceEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decayRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_rate', internalType: 'uint256', type: 'uint256' }],
    name: 'setDecayRate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: 'supply', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthTokenModuleAddress =
  '0xcfFeDd57Fb83874FfA1830DF54d6844F77615D2a' as const

export const synthetixSandboxLocalSpotMarketSynthTokenModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthTokenModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/WrapperModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketWrapperModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'uint256', type: 'uint256' },
      { name: 'current', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAmountReceived',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralType' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidMarket',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketOwner', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'OnlyMarketOwner',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'currentSupply', internalType: 'uint256', type: 'uint256' },
      { name: 'amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'WrapperExceedsMaxAmount',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountUnwrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthUnwrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amountWrapped',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
        indexed: false,
      },
      {
        name: 'feesCollected',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthWrapped',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'synthMarketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'wrapCollateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxWrappableAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WrapperSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapCollateralType', internalType: 'address', type: 'address' },
      { name: 'maxWrappableAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setWrapper',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'unwrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [
      {
        name: 'returnCollateralAmount',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'wrapAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minAmountReceived', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [
      { name: 'amountToMint', internalType: 'uint256', type: 'uint256' },
      {
        name: 'fees',
        internalType: 'struct OrderFees.Data',
        type: 'tuple',
        components: [
          { name: 'fixedFees', internalType: 'uint256', type: 'uint256' },
          { name: 'utilizationFees', internalType: 'uint256', type: 'uint256' },
          { name: 'skewFees', internalType: 'int256', type: 'int256' },
          { name: 'wrapperFees', internalType: 'int256', type: 'int256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketWrapperModuleAddress =
  '0x16Db83bDCf260FfD74812D4A625d52C3BD040c8d' as const

export const synthetixSandboxLocalSpotMarketWrapperModuleConfig = {
  address: synthetixSandboxLocalSpotMarketWrapperModuleAddress,
  abi: synthetixSandboxLocalSpotMarketWrapperModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AccountModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixAccountModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AccountProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountProxyConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixAccountProxyAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AccountRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountRouterConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixAccountRouterAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AccountTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const synthetixSandboxLocalSpotMarketSynthetixAccountTokenModuleConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixAccountTokenModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixAccountTokenModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AssociateDebtModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const synthetixSandboxLocalSpotMarketSynthetixAssociateDebtModuleConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixAssociateDebtModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixAssociateDebtModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/AssociatedSystemsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixAssociatedSystemsModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
        { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'MismatchAssociatedSystemKind',
    },
    {
      type: 'error',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'MissingAssociatedSystem',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'kind',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: true,
        },
        { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
        {
          name: 'proxy',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'impl',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'AssociatedSystemSet',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getAssociatedSystem',
      outputs: [
        { name: 'addr', internalType: 'address', type: 'address' },
        { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'uri', internalType: 'string', type: 'string' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeNft',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'name', internalType: 'string', type: 'string' },
        { name: 'symbol', internalType: 'string', type: 'string' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
        { name: 'impl', internalType: 'address', type: 'address' },
      ],
      name: 'initOrUpgradeToken',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'id', internalType: 'bytes32', type: 'bytes32' },
        { name: 'endpoint', internalType: 'address', type: 'address' },
      ],
      name: 'registerUnmanagedSystem',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const synthetixSandboxLocalSpotMarketSynthetixAssociatedSystemsModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixAssociatedSystemsModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixAssociatedSystemsModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/CollateralConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixCollateralConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
          indexed: false,
        },
      ],
      name: 'CollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'configureCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralConfiguration',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
      name: 'getCollateralConfigurations',
      outputs: [
        {
          name: '',
          internalType: 'struct CollateralConfiguration.Data[]',
          type: 'tuple[]',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixCollateralConfigurationModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixCollateralConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/CollateralMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralMockConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixCollateralMockAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/CollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const synthetixSandboxLocalSpotMarketSynthetixCollateralModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixCollateralModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/CoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalSpotMarketSynthetixCoreProxyConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixCoreProxyAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/CoreRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const synthetixSandboxLocalSpotMarketSynthetixCoreRouterConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixCoreRouterAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const synthetixSandboxLocalSpotMarketSynthetixFeatureFlagModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixFeatureFlagModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/InitialCoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalSpotMarketSynthetixInitialCoreProxyConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixInitialCoreProxyAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/InitialModuleBundle.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const synthetixSandboxLocalSpotMarketSynthetixInitialModuleBundleConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixInitialModuleBundleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixInitialModuleBundleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/IssueUSDModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const synthetixSandboxLocalSpotMarketSynthetixIssueUsdModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixIssueUsdModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/LiquidationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const synthetixSandboxLocalSpotMarketSynthetixLiquidationModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixLiquidationModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/MarketCollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixMarketCollateralModuleABI =
  [
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'from', internalType: 'address', type: 'address' },
        { name: 'to', internalType: 'address', type: 'address' },
        { name: 'value', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'FailedTransfer',
    },
    {
      type: 'error',
      inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
      name: 'FeatureUnavailable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToDeposit',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralDepositable',
    },
    {
      type: 'error',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        {
          name: 'tokenAmountToWithdraw',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'InsufficientMarketCollateralWithdrawable',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralDeposited',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'tokenAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'sender',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MarketCollateralWithdrawn',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'marketId',
          internalType: 'uint128',
          type: 'uint128',
          indexed: true,
        },
        {
          name: 'collateralType',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'systemAmount',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
        {
          name: 'owner',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
      ],
      name: 'MaximumMarketCollateralConfigured',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'configureMaximumMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'depositMarketCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMarketCollateralAmount',
      outputs: [
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'getMarketCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'getMaximumMarketCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'withdrawMarketCollateral',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const synthetixSandboxLocalSpotMarketSynthetixMarketCollateralModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixMarketCollateralModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixMarketCollateralModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/MarketManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const synthetixSandboxLocalSpotMarketSynthetixMarketManagerModuleConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixMarketManagerModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixMarketManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/MulticallModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const synthetixSandboxLocalSpotMarketSynthetixMulticallModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixMulticallModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/PoolConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixPoolConfigurationModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'PoolNotFound',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedAdded',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PoolApprovedRemoved',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'poolId',
          internalType: 'uint256',
          type: 'uint256',
          indexed: false,
        },
      ],
      name: 'PreferredPoolSet',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'addApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getApprovedPools',
      outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getPreferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'removeApprovedPool',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
      name: 'setPreferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const synthetixSandboxLocalSpotMarketSynthetixPoolConfigurationModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixPoolConfigurationModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixPoolConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/PoolModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const synthetixSandboxLocalSpotMarketSynthetixPoolModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixPoolModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/RewardsManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const synthetixSandboxLocalSpotMarketSynthetixRewardsManagerModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixRewardsManagerModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixRewardsManagerModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableAccountRBACStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountRbacStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'InvalidPermission',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    { type: 'error', inputs: [], name: 'ValueNotInSet' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_authorized',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'AccountRBAC_get_owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_grantPermission',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_hasPermission',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'AccountRBAC_isPermissionValid',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_revokeAllPermissions',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
        { name: 'target', internalType: 'address', type: 'address' },
      ],
      name: 'AccountRBAC_revokePermission',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_setOwner',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
      name: 'AccountRBAC_set_owner',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountRbacStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableAccountRbacStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableAccountRbacStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableAccountStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientAccountCollateral',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getAssignedCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'Account_getCollateralTotals',
      outputs: [
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
        { name: '', internalType: 'uint256', type: 'uint256' },
      ],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slot2AvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_get_lastInteraction',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Account_recordInteraction',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'collateralType', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Account_requireSufficientCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set___slot2AvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Account_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Account_set_lastInteraction',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableAccountStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableAccountStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableAccountStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableCollateralConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralConfigurationStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_collateralEnabled',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_convertTokenToSystemAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_depositingEnabled',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_issuanceRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRewardD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_minDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_oracleNodeId',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_tokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_requireSufficientDelegation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'CollateralConfiguration_set',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bool', type: 'bool' },
      ],
      name: 'CollateralConfiguration_set_depositingEnabled',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_issuanceRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRewardD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_minDelegationD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'CollateralConfiguration_set_oracleNodeId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_set_tokenAddress',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
        {
          name: 'collateralValueD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'CollateralConfiguration_verifyIssuanceRatio',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableCollateralConfigurationStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableCollateralLockStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralLockStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_amountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'CollateralLock_get_lockExpirationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'CollateralLock_set_amountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'CollateralLock_set_lockExpirationTime',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralLockStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableCollateralLockStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableCollateralLockStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableCollateralStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_decreaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_getTotalLocked',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Collateral_get_amountAvailableForDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_increaseAvailableCollateral',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'Collateral_set_amountAvailableForDelegationD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableCollateralStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableCollateralStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableCollateralStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableDistributionActorStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionActorStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_lastValuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'DistributionActor_set_lastValuePerShareD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'DistributionActor_set_sharesD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionActorStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableDistributionActorStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableDistributionActorStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_accumulateActor',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'Distribution_distributeValue',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorShares',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'Distribution_getActorValueChange',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_getValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'Distribution_get_valuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Distribution_setActorShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'Distribution_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'Distribution_set_valuePerShareD27',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableDistributionStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableMarketConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_marketId',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_maxDebtShareValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_weightD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_marketId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'MarketConfiguration_set_maxDebtShareValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_weightD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableMarketConfigurationStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableMarketConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableMarketPoolInfoStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketPoolInfoStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_creditCapacityAmountD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketPoolInfo_get_pendingDebtD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_creditCapacityAmountD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketPoolInfo_set_pendingDebtD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketPoolInfoStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableMarketPoolInfoStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableMarketPoolInfoStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableMarketStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    {
      type: 'error',
      inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketNotFound',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market__testOnly_getOutstandingDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_inRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market__testOnly_outRangePools',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        {
          name: 'newPoolMaxShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_adjustPoolShares',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_bumpPools',
      outputs: [
        { name: '', internalType: 'int256', type: 'int256' },
        { name: '', internalType: 'bool', type: 'bool' },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_distributeDebtToPools',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'creditCapacitySharesD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'Market_getCreditCapacityContribution',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDebtPerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getDepositedCollateralValue',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getLockedCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_getPoolCreditCapacity',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_getReportedDebt',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        {
          name: 'valueToDistributeD18',
          internalType: 'int256',
          type: 'int256',
        },
      ],
      name: 'Market_getTargetValuePerShare',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater1',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater2',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater3',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get___reservedForLater4',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_creditCapacityD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_id',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_lastDistributedMarketBalanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_marketAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
      ],
      name: 'Market_get_maximumDepositableD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minDelegateTime',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_get_netIssuanceD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_isCapacityLocked',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'marketId', internalType: 'uint128', type: 'uint128' },
        { name: 'poolId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'maxDebtShareValueD18',
          internalType: 'int256',
          type: 'int256',
        },
        {
          name: 'newCreditCapacityD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'Market_rebalancePools',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set___reservedForLater1',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater2',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater3',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'Market_set___reservedForLater4',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_creditCapacityD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint128', type: 'uint128' },
      ],
      name: 'Market_set_id',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_lastDistributedMarketBalanceD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'Market_set_marketAddress',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'idx', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_maximumDepositableD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint32', type: 'uint32' },
      ],
      name: 'Market_set_minDelegateTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'Market_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_id', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'int128', type: 'int128' },
      ],
      name: 'Market_set_netIssuanceD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
      name: 'Market_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableMarketStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableMarketStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableMarketStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestablePoolStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestablePoolStorageConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixTestablePoolStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestablePoolStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableRewardDistributionClaimStatusStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableRewardDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_duration',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_lastUpdate',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_rewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_scheduledValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_start',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_duration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_lastUpdate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set_rewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'RewardDistribution_set_scheduledValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'RewardDistribution_set_start',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'totalSharesAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'RewardDistribution_updateEntry',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableRewardDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableScalableMappingStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableScalableMappingStorageABI =
  [
    { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
    { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
      name: 'ScalableMapping_getSharesForAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_scaleModifierD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
      name: 'ScalableMapping_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_get_totalSharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
      name: 'ScalableMapping_scale',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
        { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'ScalableMapping_set_scaleModifierD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'ScalableMapping_set_sharesD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'ScalableMapping_set_totalSharesD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'ScalableMapping_totalAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableScalableMappingStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableScalableMappingStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableScalableMappingStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableSystemPoolConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get___reservedForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_preferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set___reservedForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set_preferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableVaultEpochStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultEpochStorageABI =
  [
    { type: 'error', inputs: [], name: 'EmptyDistribution' },
    { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        { name: 'amountD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_assignDebtToAccount',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_consolidateAccountDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'debtChangeD18', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_distributeDebtToAccounts',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_getAccountCollateral',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
      name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
      name: 'VaultEpoch_get_lastDelegationTime',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_totalConsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_get_unconsolidatedDebtD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint256', type: 'uint256' },
        { name: 'val', internalType: 'int256', type: 'int256' },
      ],
      name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'idx', internalType: 'uint128', type: 'uint128' },
        { name: 'val', internalType: 'uint64', type: 'uint64' },
      ],
      name: 'VaultEpoch_set_lastDelegationTime',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_totalConsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'VaultEpoch_set_unconsolidatedDebtD18',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'VaultEpoch_totalDebt',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'accountId', internalType: 'uint128', type: 'uint128' },
        {
          name: 'collateralAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
        { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'VaultEpoch_updateAccountPosition',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultEpochStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableVaultEpochStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableVaultEpochStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/TestableVaultStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const synthetixSandboxLocalSpotMarketSynthetixTestableVaultStorageConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixTestableVaultStorageAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixTestableVaultStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/USDProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdProxyConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixUsdProxyAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/USDRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdRouterConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixUsdRouterAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/USDTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const synthetixSandboxLocalSpotMarketSynthetixUsdTokenModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixUsdTokenModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/UtilsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const synthetixSandboxLocalSpotMarketSynthetixUtilsModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixUtilsModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/VaultModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const synthetixSandboxLocalSpotMarketSynthetixVaultModuleConfig = {
  address: synthetixSandboxLocalSpotMarketSynthetixVaultModuleAddress,
  abi: synthetixSandboxLocalSpotMarketSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/oracle_manager/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerCoreModuleABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerCoreModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixOracleManagerCoreModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixOracleManagerCoreModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/oracle_manager/InitialProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerInitialProxyABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerInitialProxyConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixOracleManagerInitialProxyAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixOracleManagerInitialProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/oracle_manager/NodeModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerNodeModuleABI =
  [
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerNodeModuleAddress =
  '0xBf1Dd0f3d0c9849127992AC86eB79D188b7CA6E5' as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerNodeModuleConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixOracleManagerNodeModuleAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixOracleManagerNodeModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/oracle_manager/OracleRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerOracleRouterABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'implementation', internalType: 'address', type: 'address' },
      ],
      name: 'ImplementationIsSterile',
    },
    { type: 'error', inputs: [], name: 'NoChange' },
    {
      type: 'error',
      inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
      name: 'NotAContract',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'NotNominated',
    },
    {
      type: 'error',
      inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
      name: 'Unauthorized',
    },
    { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
    { type: 'error', inputs: [], name: 'ZeroAddress' },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'oldOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerChanged',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'newOwner',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'OwnerNominated',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'self',
          internalType: 'address',
          type: 'address',
          indexed: true,
        },
        {
          name: 'implementation',
          internalType: 'address',
          type: 'address',
          indexed: false,
        },
      ],
      name: 'Upgraded',
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'acceptOwnership',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'getImplementation',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
      ],
      name: 'nominateNewOwner',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'nominatedOwner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'owner',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [],
      name: 'renounceNomination',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'simulateUpgradeTo',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: 'newImplementation', internalType: 'address', type: 'address' },
      ],
      name: 'upgradeTo',
      outputs: [],
    },
    {
      type: 'error',
      inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
      name: 'DeviationToleranceExceeded',
    },
    { type: 'error', inputs: [], name: 'InvalidInputPrice' },
    {
      type: 'error',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
      name: 'InvalidNodeDefinition',
    },
    {
      type: 'error',
      inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
      name: 'InvalidPrice',
    },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'NodeNotRegistered',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
    { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
    { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
    {
      type: 'error',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'UnprocessableNode',
    },
    {
      type: 'error',
      inputs: [
        {
          name: 'operation',
          internalType: 'enum ReducerNode.Operations',
          type: 'uint8',
        },
      ],
      name: 'UnsupportedOperation',
    },
    {
      type: 'event',
      anonymous: false,
      inputs: [
        {
          name: 'nodeId',
          internalType: 'bytes32',
          type: 'bytes32',
          indexed: false,
        },
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
          indexed: false,
        },
        {
          name: 'parameters',
          internalType: 'bytes',
          type: 'bytes',
          indexed: false,
        },
        {
          name: 'parents',
          internalType: 'bytes32[]',
          type: 'bytes32[]',
          indexed: false,
        },
      ],
      name: 'NodeRegistered',
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'getNode',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeDefinition.Data',
          type: 'tuple',
          components: [
            {
              name: 'nodeType',
              internalType: 'enum NodeDefinition.NodeType',
              type: 'uint8',
            },
            { name: 'parameters', internalType: 'bytes', type: 'bytes' },
            { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
          ],
        },
      ],
    },
    {
      stateMutability: 'pure',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'getNodeId',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
      name: 'process',
      outputs: [
        {
          name: 'node',
          internalType: 'struct NodeOutput.Data',
          type: 'tuple',
          components: [
            { name: 'price', internalType: 'int256', type: 'int256' },
            { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
            {
              name: '__slotAvailableForFutureUse1',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: '__slotAvailableForFutureUse2',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'nodeType',
          internalType: 'enum NodeDefinition.NodeType',
          type: 'uint8',
        },
        { name: 'parameters', internalType: 'bytes', type: 'bytes' },
        { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
      ],
      name: 'registerNode',
      outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    },
  ] as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerOracleRouterAddress =
  '0xcdDEF040597b7566eC7645fD7be15f5e14a2F920' as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerOracleRouterConfig =
  {
    address:
      synthetixSandboxLocalSpotMarketSynthetixOracleManagerOracleRouterAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixOracleManagerOracleRouterABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/spotMarket/synthetix/oracle_manager/Proxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalSpotMarketSynthetixOracleManagerProxyConfig =
  {
    address: synthetixSandboxLocalSpotMarketSynthetixOracleManagerProxyAddress,
    abi: synthetixSandboxLocalSpotMarketSynthetixOracleManagerProxyABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AccountModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAccountModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixAccountModuleAddress =
  '0x979B8a61B877fC74f84648d0dCdeb42391ddCE3b' as const

export const synthetixSandboxLocalSynthetixAccountModuleConfig = {
  address: synthetixSandboxLocalSynthetixAccountModuleAddress,
  abi: synthetixSandboxLocalSynthetixAccountModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AccountProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAccountProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixAccountProxyAddress =
  '0xE06fE85b65E0110f78638022FA9AD58c6b6c69bF' as const

export const synthetixSandboxLocalSynthetixAccountProxyConfig = {
  address: synthetixSandboxLocalSynthetixAccountProxyAddress,
  abi: synthetixSandboxLocalSynthetixAccountProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AccountRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAccountRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixAccountRouterAddress =
  '0x6EbD720D47b0E1754CFe423e93730597D86aC26C' as const

export const synthetixSandboxLocalSynthetixAccountRouterConfig = {
  address: synthetixSandboxLocalSynthetixAccountRouterAddress,
  abi: synthetixSandboxLocalSynthetixAccountRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AccountTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAccountTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'CannotSelfApprove',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'length', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IndexOverrun',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidOwner',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'InvalidTransferRecipient',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenAlreadyMinted',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'TokenDoesNotExist',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'holder', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
    name: 'setBaseTokenURI',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixAccountTokenModuleAddress =
  '0x790F6939f3Cb0b76A1465A340aEF9347d92ceEA0' as const

export const synthetixSandboxLocalSynthetixAccountTokenModuleConfig = {
  address: synthetixSandboxLocalSynthetixAccountTokenModuleAddress,
  abi: synthetixSandboxLocalSynthetixAccountTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AssociateDebtModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAssociateDebtModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixAssociateDebtModuleAddress =
  '0xbe7a510c72aE8c23560Ac7ada5d8765F9492BadA' as const

export const synthetixSandboxLocalSynthetixAssociateDebtModuleConfig = {
  address: synthetixSandboxLocalSynthetixAssociateDebtModuleAddress,
  abi: synthetixSandboxLocalSynthetixAssociateDebtModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/AssociatedSystemsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixAssociatedSystemsModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixAssociatedSystemsModuleAddress =
  '0xf8d85923ef87fb6e6f3875805beE59E02C596076' as const

export const synthetixSandboxLocalSynthetixAssociatedSystemsModuleConfig = {
  address: synthetixSandboxLocalSynthetixAssociatedSystemsModuleAddress,
  abi: synthetixSandboxLocalSynthetixAssociatedSystemsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/CollateralConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixCollateralConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixCollateralConfigurationModuleAddress =
  '0x9541aA2A6b9E4874205BfB8a348F287049FE5d0A' as const

export const synthetixSandboxLocalSynthetixCollateralConfigurationModuleConfig =
  {
    address: synthetixSandboxLocalSynthetixCollateralConfigurationModuleAddress,
    abi: synthetixSandboxLocalSynthetixCollateralConfigurationModuleABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/CollateralMock.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixCollateralMockABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSynthetixCollateralMockAddress =
  '0x152E3B07d82538FaE3A588E0F04d176c2Ec08fA1' as const

export const synthetixSandboxLocalSynthetixCollateralMockConfig = {
  address: synthetixSandboxLocalSynthetixCollateralMockAddress,
  abi: synthetixSandboxLocalSynthetixCollateralMockABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/CollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixCollateralModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixCollateralModuleAddress =
  '0x658731A2CCf51FE5c92eD51A72A32F33702Bc526' as const

export const synthetixSandboxLocalSynthetixCollateralModuleConfig = {
  address: synthetixSandboxLocalSynthetixCollateralModuleAddress,
  abi: synthetixSandboxLocalSynthetixCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/CoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalSynthetixCoreProxyConfig = {
  address: synthetixSandboxLocalSynthetixCoreProxyAddress,
  abi: synthetixSandboxLocalSynthetixCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/CoreRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixCoreRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'InvalidAccountId',
  },
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  {
    type: 'error',
    inputs: [{ name: 'origin', internalType: 'address', type: 'address' }],
    name: 'OnlyAccountTokenProxy',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionNotGranted',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'permission',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PermissionRevoked',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedAccountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'createAccount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountLastInteraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'getAccountPermissions',
    outputs: [
      {
        name: 'accountPerms',
        internalType: 'struct IAccountModule.AccountPermissions[]',
        type: 'tuple[]',
        components: [
          { name: 'user', internalType: 'address', type: 'address' },
          { name: 'permissions', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccountTokenAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'notifyAccountTransfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'renouncePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'revokePermission',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint256', type: 'uint256' },
      { name: 'poolId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotFundedByPool',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedDebt',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'DebtAssociated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'associateDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'currentTime', internalType: 'uint256', type: 'uint256' },
      { name: 'requiredTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'AccountActivityTimeoutPending',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'expireTimestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'CollateralLockExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'cleanExpiredLocks',
    outputs: [{ name: 'cleared', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'expireTimestamp', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'createLock',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountAvailableCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountCollateral',
    outputs: [
      { name: 'totalDeposited', internalType: 'uint256', type: 'uint256' },
      { name: 'totalAssigned', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLocked', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'offset', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLocks',
    outputs: [
      {
        name: 'locks',
        internalType: 'struct CollateralLock.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'amountD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'lockExpirationTime',
            internalType: 'uint64',
            type: 'uint64',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'CollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'config',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'configureCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data',
        type: 'tuple',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hideDisabled', internalType: 'bool', type: 'bool' }],
    name: 'getCollateralConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
          {
            name: 'issuanceRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRatioD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationRewardD18',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'tokenAddress', internalType: 'address', type: 'address' },
          {
            name: 'minDelegationD18',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getCollateralPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixCoreRouterAddress =
  '0x91752B65232fD32f9982273974c6aE0789e95697' as const

export const synthetixSandboxLocalSynthetixCoreRouterConfig = {
  address: synthetixSandboxLocalSynthetixCoreRouterAddress,
  abi: synthetixSandboxLocalSynthetixCoreRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/FeatureFlagModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixFeatureFlagModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'allowAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagAllowAllSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FeatureFlagAllowlistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'deniers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FeatureFlagDeniersReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feature',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'denyAll', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FeatureFlagDenyAllSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'addToFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDeniers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagAllowlist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'feature', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getFeatureFlagDenyAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isFeatureAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'removeFromFeatureFlagAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'deniers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setDeniers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'allowAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagAllowAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feature', internalType: 'bytes32', type: 'bytes32' },
      { name: 'denyAll', internalType: 'bool', type: 'bool' },
    ],
    name: 'setFeatureFlagDenyAll',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixFeatureFlagModuleAddress =
  '0x002AB3794418cCbFE9bBAad708C3Fa30B94e0e0F' as const

export const synthetixSandboxLocalSynthetixFeatureFlagModuleConfig = {
  address: synthetixSandboxLocalSynthetixFeatureFlagModuleAddress,
  abi: synthetixSandboxLocalSynthetixFeatureFlagModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/InitialCoreProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixInitialCoreProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixInitialCoreProxyAddress =
  '0x381aeF01aB853657163ccbBFC1A993D49a77307c' as const

export const synthetixSandboxLocalSynthetixInitialCoreProxyConfig = {
  address: synthetixSandboxLocalSynthetixInitialCoreProxyAddress,
  abi: synthetixSandboxLocalSynthetixInitialCoreProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/InitialModuleBundle.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixInitialModuleBundleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixInitialModuleBundleAddress =
  '0x2F4a58770bDaBFef1f3Cee0eF6Ad05Db4F4d954E' as const

export const synthetixSandboxLocalSynthetixInitialModuleBundleConfig = {
  address: synthetixSandboxLocalSynthetixInitialModuleBundleAddress,
  abi: synthetixSandboxLocalSynthetixInitialModuleBundleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/IssueUSDModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixIssueUsdModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [{ name: 'currentDebt', internalType: 'int256', type: 'int256' }],
    name: 'InsufficientDebt',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IssuanceFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdBurned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'UsdMinted',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnUsd',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintUsd',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixIssueUsdModuleAddress =
  '0x1CD17c0acF7f48f3D6416b542E8f623b47e013ab' as const

export const synthetixSandboxLocalSynthetixIssueUsdModuleConfig = {
  address: synthetixSandboxLocalSynthetixIssueUsdModuleAddress,
  abi: synthetixSandboxLocalSynthetixIssueUsdModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/LiquidationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixLiquidationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      { name: 'currentCRatio', internalType: 'uint256', type: 'uint256' },
      { name: 'cratio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'IneligibleForLiquidation',
  },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  { type: 'error', inputs: [], name: 'MustBeVaultLiquidated' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Liquidation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'VaultLiquidation',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isPositionLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'isVaultLiquidatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'liquidateAsAccountId',
        internalType: 'uint128',
        type: 'uint128',
      },
      { name: 'maxUsd', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidateVault',
    outputs: [
      {
        name: 'liquidationData',
        internalType: 'struct ILiquidationModule.LiquidationData',
        type: 'tuple',
        components: [
          { name: 'debtLiquidated', internalType: 'uint256', type: 'uint256' },
          {
            name: 'collateralLiquidated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'amountRewarded', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
] as const

export const synthetixSandboxLocalSynthetixLiquidationModuleAddress =
  '0x2cBB85cC49F73d87CACdeEA408ea196176Be60C9' as const

export const synthetixSandboxLocalSynthetixLiquidationModuleConfig = {
  address: synthetixSandboxLocalSynthetixLiquidationModuleAddress,
  abi: synthetixSandboxLocalSynthetixLiquidationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/MarketCollateralModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixMarketCollateralModuleABI = [
  { type: 'error', inputs: [], name: 'CollateralNotFound' },
  {
    type: 'error',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'FailedTransfer',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToDeposit',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralDepositable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'tokenAmountToWithdraw',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'InsufficientMarketCollateralWithdrawable',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  {
    type: 'error',
    inputs: [
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'PrecisionLost',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketCollateralWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'systemAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MaximumMarketCollateralConfigured',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'configureMaximumMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMarketCollateralAmount',
    outputs: [
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getMaximumMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketCollateral',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixMarketCollateralModuleAddress =
  '0xa61825604f9Bb29E8A9dF85b4bDb663B358D6638' as const

export const synthetixSandboxLocalSynthetixMarketCollateralModuleConfig = {
  address: synthetixSandboxLocalSynthetixMarketCollateralModuleAddress,
  abi: synthetixSandboxLocalSynthetixMarketCollateralModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/MarketManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixMarketManagerModuleABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'IncorrectMarketInterface',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'NotEnoughLiquidity',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MarketSystemFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'market',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MarketUsdWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMarketMinLiquidityRatio',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'marketId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'minDelegateTime',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
    ],
    name: 'SetMinDelegateTime',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'depositMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMarketFees',
    outputs: [
      { name: 'depositFeeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'withdrawFeeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketMinDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketNetIssuance',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMarketTotalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOracleManager',
    outputs: [
      { name: '', internalType: 'contract IOracleManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUsdToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'getWithdrawableMarketUsd',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'isMarketCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'registerMarket',
    outputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minDelegateTime', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setMarketMinDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawMarketUsd',
    outputs: [{ name: 'feeAmount', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixMarketManagerModuleAddress =
  '0x0137ecb811330763277daE159B6Cf9306645c18f' as const

export const synthetixSandboxLocalSynthetixMarketManagerModuleConfig = {
  address: synthetixSandboxLocalSynthetixMarketManagerModuleAddress,
  abi: synthetixSandboxLocalSynthetixMarketManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/MulticallModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixMulticallModuleABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

export const synthetixSandboxLocalSynthetixMulticallModuleAddress =
  '0xb61926f01cAD38f51236F861dABcC59626F2078d' as const

export const synthetixSandboxLocalSynthetixMulticallModuleConfig = {
  address: synthetixSandboxLocalSynthetixMulticallModuleAddress,
  abi: synthetixSandboxLocalSynthetixMulticallModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/PoolConfigurationModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixPoolConfigurationModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolApprovedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PreferredPoolSet',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'addApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getApprovedPools',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPreferredPool',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'removeApprovedPool',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'setPreferredPool',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixPoolConfigurationModuleAddress =
  '0x58fEF24F50d5658F7269aE804cF50dD1890992f6' as const

export const synthetixSandboxLocalSynthetixPoolConfigurationModuleConfig = {
  address: synthetixSandboxLocalSynthetixPoolConfigurationModuleAddress,
  abi: synthetixSandboxLocalSynthetixPoolConfigurationModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/PoolModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixPoolModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolAlreadyExists',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'markets',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolConfigurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNameUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRenounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolNominationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'nominatedOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PoolOwnershipAccepted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minLiquidityRatio',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetMinLiquidityRatio',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'acceptPoolOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'requestedPoolId', internalType: 'uint128', type: 'uint128' },
      { name: 'owner', internalType: 'address', type: 'address' },
    ],
    name: 'createPool',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinLiquidityRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getNominatedPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolName',
    outputs: [{ name: 'poolName', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'getPoolOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nominatedOwner', internalType: 'address', type: 'address' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'nominatePoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'renouncePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'revokePoolNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minLiquidityRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinLiquidityRatio',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newMarketConfigurations',
        internalType: 'struct MarketConfiguration.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'marketId', internalType: 'uint128', type: 'uint128' },
          { name: 'weightD18', internalType: 'uint128', type: 'uint128' },
          {
            name: 'maxDebtShareValueD18',
            internalType: 'int128',
            type: 'int128',
          },
        ],
      },
    ],
    name: 'setPoolConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'name', internalType: 'string', type: 'string' },
    ],
    name: 'setPoolName',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixPoolModuleAddress =
  '0xd14aA7Ac9f07c98F3C2984e3cFCC1Bcc5B766701' as const

export const synthetixSandboxLocalSynthetixPoolModuleConfig = {
  address: synthetixSandboxLocalSynthetixPoolModuleAddress,
  abi: synthetixSandboxLocalSynthetixPoolModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/RewardsManagerModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixRewardsManagerModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'AccountNotFound',
  },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    type: 'error',
    inputs: [{ name: 'distributor', internalType: 'address', type: 'address' }],
    name: 'RewardUnavailable',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'start',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'duration',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RewardsDistributorRemoved',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'claimRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'start', internalType: 'uint64', type: 'uint64' },
      { name: 'duration', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'distributeRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'getRewardRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'registerRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'distributor', internalType: 'address', type: 'address' },
    ],
    name: 'removeRewardsDistributor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixSandboxLocalSynthetixRewardsManagerModuleAddress =
  '0x6E842803c349F55447F370d516f38461f45A6ed2' as const

export const synthetixSandboxLocalSynthetixRewardsManagerModuleConfig = {
  address: synthetixSandboxLocalSynthetixRewardsManagerModuleAddress,
  abi: synthetixSandboxLocalSynthetixRewardsManagerModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableAccountRBACStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableAccountRbacStorageABI = [
  {
    type: 'error',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'InvalidPermission',
  },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_authorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'AccountRBAC_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_grantPermission',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_hasPermission',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'permission', internalType: 'bytes32', type: 'bytes32' }],
    name: 'AccountRBAC_isPermissionValid',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_revokeAllPermissions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'AccountRBAC_revokePermission',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'address', type: 'address' }],
    name: 'AccountRBAC_set_owner',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableAccountRbacStorageAddress =
  '0x15979A635FF16F303261AC1392f7d000614458Cf' as const

export const synthetixSandboxLocalSynthetixTestableAccountRbacStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableAccountRbacStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableAccountRbacStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableAccountStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableAccountStorageABI = [
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getAssignedCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Account_getCollateralTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slot2AvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_get_lastInteraction',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Account_recordInteraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Account_requireSufficientCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set___slot2AvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Account_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Account_set_lastInteraction',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableAccountStorageAddress =
  '0xe3f20c7Af53a6E3EAd26d40b82bA8283D2B1b94d' as const

export const synthetixSandboxLocalSynthetixTestableAccountStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableAccountStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableAccountStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableCollateralConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableCollateralConfigurationStorageABI =
  [
    {
      type: 'error',
      inputs: [
        { name: 'collateralType', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralDepositDisabled',
    },
    { type: 'error', inputs: [], name: 'CollateralNotFound' },
    {
      type: 'error',
      inputs: [
        { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
        { name: 'debt', internalType: 'uint256', type: 'uint256' },
        { name: 'ratio', internalType: 'uint256', type: 'uint256' },
        { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientCollateralRatio',
    },
    {
      type: 'error',
      inputs: [
        { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'InsufficientDelegation',
    },
    {
      type: 'error',
      inputs: [
        { name: 'parameter', internalType: 'string', type: 'string' },
        { name: 'reason', internalType: 'string', type: 'string' },
      ],
      name: 'InvalidParameter',
    },
    { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
    {
      type: 'error',
      inputs: [
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      ],
      name: 'PrecisionLost',
    },
    { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_collateralEnabled',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_convertTokenToSystemAmount',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_getCollateralPrice',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_depositingEnabled',
      outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_issuanceRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_liquidationRewardD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_minDelegationD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_oracleNodeId',
      outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_get_tokenAddress',
      outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'token', internalType: 'address', type: 'address' },
        { name: 'amountD18', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_requireSufficientDelegation',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        {
          name: 'config',
          internalType: 'struct CollateralConfiguration.Data',
          type: 'tuple',
          components: [
            { name: 'depositingEnabled', internalType: 'bool', type: 'bool' },
            {
              name: 'issuanceRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRatioD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            {
              name: 'liquidationRewardD18',
              internalType: 'uint256',
              type: 'uint256',
            },
            { name: 'oracleNodeId', internalType: 'bytes32', type: 'bytes32' },
            { name: 'tokenAddress', internalType: 'address', type: 'address' },
            {
              name: 'minDelegationD18',
              internalType: 'uint256',
              type: 'uint256',
            },
          ],
        },
      ],
      name: 'CollateralConfiguration_set',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bool', type: 'bool' },
      ],
      name: 'CollateralConfiguration_set_depositingEnabled',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_issuanceRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_liquidationRewardD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'uint256', type: 'uint256' },
      ],
      name: 'CollateralConfiguration_set_minDelegationD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'bytes32', type: 'bytes32' },
      ],
      name: 'CollateralConfiguration_set_oracleNodeId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'val', internalType: 'address', type: 'address' },
      ],
      name: 'CollateralConfiguration_set_tokenAddress',
      outputs: [],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [
        { name: '_load_token', internalType: 'address', type: 'address' },
        { name: 'debtD18', internalType: 'uint256', type: 'uint256' },
        {
          name: 'collateralValueD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'CollateralConfiguration_verifyIssuanceRatio',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableCollateralConfigurationStorageAddress =
  '0x6a6FC716ce286bAb956861054448e324d790A505' as const

export const synthetixSandboxLocalSynthetixTestableCollateralConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableCollateralConfigurationStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableCollateralConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableCollateralLockStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableCollateralLockStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_amountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CollateralLock_get_lockExpirationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'CollateralLock_set_amountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
    name: 'CollateralLock_set_lockExpirationTime',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableCollateralLockStorageAddress =
  '0xc08e5Df07c71b628D3c3c6DD5E3A7639c33b65CC' as const

export const synthetixSandboxLocalSynthetixTestableCollateralLockStorageConfig =
  {
    address: synthetixSandboxLocalSynthetixTestableCollateralLockStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableCollateralLockStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableCollateralStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableCollateralStorageABI = [
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint64' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_decreaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_getTotalLocked',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Collateral_get_amountAvailableForDelegationD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_increaseAvailableCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Collateral_set_amountAvailableForDelegationD18',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableCollateralStorageAddress =
  '0x54bEF792148aBE24D48653ab0feF6Ddd94F7eb62' as const

export const synthetixSandboxLocalSynthetixTestableCollateralStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableCollateralStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableCollateralStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableDistributionActorStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableDistributionActorStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_lastValuePerShareD27',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'DistributionActor_get_sharesD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'DistributionActor_set_lastValuePerShareD27',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'DistributionActor_set_sharesD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableDistributionActorStorageAddress =
  '0x407dF88963443940815d706Ff0Dbba029317e10E' as const

export const synthetixSandboxLocalSynthetixTestableDistributionActorStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableDistributionActorStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableDistributionActorStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableDistributionStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_accumulateActor',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'Distribution_distributeValue',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorShares',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Distribution_getActorValueChange',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_getValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Distribution_get_valuePerShareD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorSharesD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Distribution_setActorShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'Distribution_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Distribution_set_valuePerShareD27',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableDistributionStorageAddress =
  '0x504AFA1d0Dba634478662145c733248f739064Af' as const

export const synthetixSandboxLocalSynthetixTestableDistributionStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableDistributionStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableDistributionStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableMarketConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableMarketConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_marketId',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_maxDebtShareValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'MarketConfiguration_get_weightD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_marketId',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'MarketConfiguration_set_maxDebtShareValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'MarketConfiguration_set_weightD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableMarketConfigurationStorageAddress =
  '0xeB8202F536559bE65cD21c2c7e45F3ccB836e352' as const

export const synthetixSandboxLocalSynthetixTestableMarketConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableMarketConfigurationStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableMarketConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableMarketPoolInfoStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableMarketPoolInfoStorageABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_creditCapacityAmountD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MarketPoolInfo_get_pendingDebtD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_creditCapacityAmountD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketPoolInfo_set_pendingDebtD18',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableMarketPoolInfoStorageAddress =
  '0xD6413ea2b9A2232e4D4D285eb9eF680c362892D3' as const

export const synthetixSandboxLocalSynthetixTestableMarketPoolInfoStorageConfig =
  {
    address: synthetixSandboxLocalSynthetixTestableMarketPoolInfoStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableMarketPoolInfoStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableMarketStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableMarketStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market__testOnly_getOutstandingDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_inRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market__testOnly_outRangePools',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'newPoolMaxShareValueD18',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'Market_adjustPoolShares',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDistributedD18', internalType: 'int256', type: 'int256' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_bumpPools',
    outputs: [
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'maxIter', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_distributeDebtToPools',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      {
        name: 'creditCapacitySharesD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'maxShareValueD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getCreditCapacityContribution',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDebtPerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getDepositedCollateralValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getLockedCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_getPoolCreditCapacity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_getReportedDebt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'valueToDistributeD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Market_getTargetValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater1',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get___reservedForLater4',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_creditCapacityD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_lastDistributedMarketBalanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_marketAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
    ],
    name: 'Market_get_maximumDepositableD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minDelegateTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_minLiquidityRatioD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_get_netIssuanceD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_isCapacityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'maxDebtShareValueD18', internalType: 'int256', type: 'int256' },
      {
        name: 'newCreditCapacityD18',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'Market_rebalancePools',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set___reservedForLater1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Market_set___reservedForLater4',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_creditCapacityD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Market_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_lastDistributedMarketBalanceD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Market_set_marketAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'idx', internalType: 'address', type: 'address' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_maximumDepositableD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'Market_set_minDelegateTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Market_set_minLiquidityRatioD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Market_set_netIssuanceD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Market_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableMarketStorageAddress =
  '0x330b2de1a041c2D78225337dfDf7F3c922dE684B' as const

export const synthetixSandboxLocalSynthetixTestableMarketStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableMarketStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableMarketStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestablePoolStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestablePoolStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_currentAccountCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateral',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_currentVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_distributeDebtToVaults',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_getRequiredMinDelegationTime',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
      {
        name: 'minLiquidityRatioD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'debtPerShareD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'Pool_getSystemMaxValuePerShare',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved1',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved2',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get___reserved3',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_id',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_lastConfigurationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalVaultDebtsD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_load_id', internalType: 'uint128', type: 'uint128' }],
    name: 'Pool_get_totalWeightsD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'marketId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_hasMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'caller', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_onlyPoolOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_recalculateVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'lastDelegationTime', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_requireMinDelegationTimeElapsed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_resetVault',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved1',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved2',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set___reserved3',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_id',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'Pool_set_lastConfigurationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'string', type: 'string' },
    ],
    name: 'Pool_set_name',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_nominatedOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'address', type: 'address' },
    ],
    name: 'Pool_set_owner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'int128', type: 'int128' },
    ],
    name: 'Pool_set_totalVaultDebtsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_set_totalWeightsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_load_id', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'Pool_updateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixTestablePoolStorageAddress =
  '0x47eb1a48Ebd64aEcb709f5DDF3c17005Fa178964' as const

export const synthetixSandboxLocalSynthetixTestablePoolStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestablePoolStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestablePoolStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableRewardDistributionClaimStatusStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableRewardDistributionClaimStatusStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_lastRewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistributionClaimStatus_get_pendingSendD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_lastRewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistributionClaimStatus_set_pendingSendD18',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableRewardDistributionClaimStatusStorageAddress =
  '0x83D0EA8FCD52b2994f0EE2aaE45E2254e32210Dd' as const

export const synthetixSandboxLocalSynthetixTestableRewardDistributionClaimStatusStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableRewardDistributionClaimStatusStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableRewardDistributionClaimStatusStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableRewardDistributionStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableRewardDistributionStorageABI =
  [
    { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
    { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
    { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
    { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get___slotAvailableForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_duration',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_lastUpdate',
      outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_rewardPerShareD18',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_scheduledValueD18',
      outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'RewardDistribution_get_start',
      outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set___slotAvailableForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_duration',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint32', type: 'uint32' }],
      name: 'RewardDistribution_set_lastUpdate',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'RewardDistribution_set_rewardPerShareD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
      name: 'RewardDistribution_set_scheduledValueD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint64', type: 'uint64' }],
      name: 'RewardDistribution_set_start',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [
        {
          name: 'totalSharesAmountD18',
          internalType: 'uint256',
          type: 'uint256',
        },
      ],
      name: 'RewardDistribution_updateEntry',
      outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableRewardDistributionStorageAddress =
  '0xC71E629349CbB297fc2dAA93bD9978E567A4BfC1' as const

export const synthetixSandboxLocalSynthetixTestableRewardDistributionStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableRewardDistributionStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableRewardDistributionStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableScalableMappingStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableScalableMappingStorageABI = [
  { type: 'error', inputs: [], name: 'CannotScaleEmptyMapping' },
  { type: 'error', inputs: [], name: 'InsufficientMappedAmount' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'actorId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'amountD18', internalType: 'uint256', type: 'uint256' }],
    name: 'ScalableMapping_getSharesForAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_scaleModifierD27',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'bytes32', type: 'bytes32' }],
    name: 'ScalableMapping_get_sharesD18',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_get_totalSharesD18',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'valueD18', internalType: 'int256', type: 'int256' }],
    name: 'ScalableMapping_scale',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'actorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newActorValueD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'ScalableMapping_set_scaleModifierD27',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'bytes32', type: 'bytes32' },
      { name: 'val', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'ScalableMapping_set_sharesD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
    name: 'ScalableMapping_set_totalSharesD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ScalableMapping_totalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableScalableMappingStorageAddress =
  '0xc97A01873B0d62B9d744110B3017b56F4727D202' as const

export const synthetixSandboxLocalSynthetixTestableScalableMappingStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableScalableMappingStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableScalableMappingStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableSystemPoolConfigurationStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableSystemPoolConfigurationStorageABI =
  [
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get___reservedForFutureUse',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_minLiquidityRatioD18',
      outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
      stateMutability: 'view',
      type: 'function',
      inputs: [],
      name: 'SystemPoolConfiguration_get_preferredPool',
      outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set___reservedForFutureUse',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
      name: 'SystemPoolConfiguration_set_minLiquidityRatioD18',
      outputs: [],
    },
    {
      stateMutability: 'nonpayable',
      type: 'function',
      inputs: [{ name: 'val', internalType: 'uint128', type: 'uint128' }],
      name: 'SystemPoolConfiguration_set_preferredPool',
      outputs: [],
    },
  ] as const

export const synthetixSandboxLocalSynthetixTestableSystemPoolConfigurationStorageAddress =
  '0xdF8614E3a42dDC32Ec95Ed438869EB5B4d0F4Eb5' as const

export const synthetixSandboxLocalSynthetixTestableSystemPoolConfigurationStorageConfig =
  {
    address:
      synthetixSandboxLocalSynthetixTestableSystemPoolConfigurationStorageAddress,
    abi: synthetixSandboxLocalSynthetixTestableSystemPoolConfigurationStorageABI,
  } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableVaultEpochStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableVaultEpochStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'amountD18', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_assignDebtToAccount',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'VaultEpoch_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_getAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint256', type: 'uint256' }],
    name: 'VaultEpoch_get_consolidatedDebtAmountsD18',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'idx', internalType: 'uint128', type: 'uint128' }],
    name: 'VaultEpoch_get_lastDelegationTime',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_totalConsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_get_unconsolidatedDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint256', type: 'uint256' },
      { name: 'val', internalType: 'int256', type: 'int256' },
    ],
    name: 'VaultEpoch_set_consolidatedDebtAmountsD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'idx', internalType: 'uint128', type: 'uint128' },
      { name: 'val', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'VaultEpoch_set_lastDelegationTime',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_totalConsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'VaultEpoch_set_unconsolidatedDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'VaultEpoch_totalDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralAmountD18', internalType: 'uint256', type: 'uint256' },
      { name: 'leverageD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'VaultEpoch_updateAccountPosition',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableVaultEpochStorageAddress =
  '0xD0700302fC769DE76BB98C2b10a46325fEBda460' as const

export const synthetixSandboxLocalSynthetixTestableVaultEpochStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableVaultEpochStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableVaultEpochStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/TestableVaultStorage.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixTestableVaultStorageABI = [
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_consolidateAccountDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountId', internalType: 'uint128', type: 'uint128' }],
    name: 'Vault_currentAccountCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_currentDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'debtChangeD18', internalType: 'int256', type: 'int256' }],
    name: 'Vault_distributeDebtToAccounts',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get___slotAvailableForFutureUse',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_epoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'Vault_get_prevTotalDebtD18',
    outputs: [{ name: '', internalType: 'int128', type: 'int128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'Vault_reset',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Vault_set___slotAvailableForFutureUse',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'uint256', type: 'uint256' }],
    name: 'Vault_set_epoch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'val', internalType: 'int128', type: 'int128' }],
    name: 'Vault_set_prevTotalDebtD18',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralPriceD18', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Vault_updateCreditCapacity',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int256', type: 'int256' },
      { name: '', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      { name: 'rewardId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'Vault_updateReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'Vault_updateRewards',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
    ],
  },
] as const

export const synthetixSandboxLocalSynthetixTestableVaultStorageAddress =
  '0xe8021266D2659aa320c114f9333502B38787a04B' as const

export const synthetixSandboxLocalSynthetixTestableVaultStorageConfig = {
  address: synthetixSandboxLocalSynthetixTestableVaultStorageAddress,
  abi: synthetixSandboxLocalSynthetixTestableVaultStorageABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/USDProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixUsdProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSynthetixUsdProxyAddress =
  '0x629673e90e428069AeB328DE4EF2040a7C22f723' as const

export const synthetixSandboxLocalSynthetixUsdProxyConfig = {
  address: synthetixSandboxLocalSynthetixUsdProxyAddress,
  abi: synthetixSandboxLocalSynthetixUsdProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/USDRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixUsdRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'MissingAssociatedSystem',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'kind', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'proxy',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'impl',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AssociatedSystemSet',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAssociatedSystem',
    outputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'kind', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeNft',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'impl', internalType: 'address', type: 'address' },
    ],
    name: 'initOrUpgradeToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'endpoint', internalType: 'address', type: 'address' },
    ],
    name: 'registerUnmanagedSystem',
    outputs: [],
  },
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSynthetixUsdRouterAddress =
  '0xCB575e07D1547d7A2b736e7087AFeeb80c4389e1' as const

export const synthetixSandboxLocalSynthetixUsdRouterConfig = {
  address: synthetixSandboxLocalSynthetixUsdRouterAddress,
  abi: synthetixSandboxLocalSynthetixUsdRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/USDTokenModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixUsdTokenModuleABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAllowance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'required', internalType: 'uint256', type: 'uint256' },
      { name: 'existing', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientBalance',
  },
  {
    type: 'error',
    inputs: [
      { name: 'parameter', internalType: 'string', type: 'string' },
      { name: 'reason', internalType: 'string', type: 'string' },
    ],
    name: 'InvalidParameter',
  },
  {
    type: 'error',
    inputs: [
      { name: 'expected', internalType: 'bytes32', type: 'bytes32' },
      { name: 'actual', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'MismatchAssociatedSystemKind',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnWithAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenName', internalType: 'string', type: 'string' },
      { name: 'tokenSymbol', internalType: 'string', type: 'string' },
      { name: 'tokenDecimals', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isInitialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAllowance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destChainId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferCrossChain',
    outputs: [{ name: 'feesPaid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

export const synthetixSandboxLocalSynthetixUsdTokenModuleAddress =
  '0xc4C69b65ca3BFF98839A63a23AFb639a445f51A6' as const

export const synthetixSandboxLocalSynthetixUsdTokenModuleConfig = {
  address: synthetixSandboxLocalSynthetixUsdTokenModuleAddress,
  abi: synthetixSandboxLocalSynthetixUsdTokenModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/UtilsModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixUtilsModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oracleManagerAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'configureOracleManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'k', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getConfig',
    outputs: [{ name: 'v', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ccipSend', internalType: 'address', type: 'address' },
      { name: 'ccipReceive', internalType: 'address', type: 'address' },
      { name: 'ccipTokenPool', internalType: 'address', type: 'address' },
    ],
    name: 'registerCcip',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'k', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setConfig',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixUtilsModuleAddress =
  '0x8986BC8B1cDB92FE2a2E9765a34193dF5754254D' as const

export const synthetixSandboxLocalSynthetixUtilsModuleConfig = {
  address: synthetixSandboxLocalSynthetixUtilsModuleAddress,
  abi: synthetixSandboxLocalSynthetixUtilsModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/VaultModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixVaultModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint256', type: 'uint256' }],
    name: 'CapacityLocked',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'CollateralDepositDisabled',
  },
  { type: 'error', inputs: [], name: 'EmptyDistribution' },
  {
    type: 'error',
    inputs: [{ name: 'which', internalType: 'bytes32', type: 'bytes32' }],
    name: 'FeatureUnavailable',
  },
  {
    type: 'error',
    inputs: [
      { name: 'requestedAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientAccountCollateral',
  },
  {
    type: 'error',
    inputs: [
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'ratio', internalType: 'uint256', type: 'uint256' },
      { name: 'minRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientCollateralRatio',
  },
  {
    type: 'error',
    inputs: [
      { name: 'minDelegation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'InsufficientDelegation',
  },
  { type: 'error', inputs: [], name: 'InvalidCollateralAmount' },
  {
    type: 'error',
    inputs: [{ name: 'leverage', internalType: 'uint256', type: 'uint256' }],
    name: 'InvalidLeverage',
  },
  {
    type: 'error',
    inputs: [{ name: 'marketId', internalType: 'uint128', type: 'uint128' }],
    name: 'MarketNotFound',
  },
  {
    type: 'error',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'timeRemaining', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'MinDelegationTimeoutPending',
  },
  { type: 'error', inputs: [], name: 'OverflowInt128ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowUint128ToInt128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint128' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint32' },
  { type: 'error', inputs: [], name: 'OverflowUint32ToInt32' },
  { type: 'error', inputs: [], name: 'OverflowUint64ToInt64' },
  {
    type: 'error',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'permission', internalType: 'bytes32', type: 'bytes32' },
      { name: 'target', internalType: 'address', type: 'address' },
    ],
    name: 'PermissionDenied',
  },
  {
    type: 'error',
    inputs: [{ name: 'poolId', internalType: 'uint128', type: 'uint128' }],
    name: 'PoolNotFound',
  },
  { type: 'error', inputs: [], name: 'PositionOutOfBounds' },
  { type: 'error', inputs: [], name: 'RewardDistributorNotFound' },
  { type: 'error', inputs: [], name: 'ValueAlreadyInSet' },
  { type: 'error', inputs: [], name: 'ValueNotInSet' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'accountId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'poolId',
        internalType: 'uint128',
        type: 'uint128',
        indexed: true,
      },
      {
        name: 'collateralType',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'leverage',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationUpdated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
      {
        name: 'newCollateralAmountD18',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'leverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateCollateral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPosition',
    outputs: [
      { name: 'collateralAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'collateralValue', internalType: 'uint256', type: 'uint256' },
      { name: 'debt', internalType: 'int256', type: 'int256' },
      {
        name: 'collateralizationRatio',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'accountId', internalType: 'uint128', type: 'uint128' },
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getPositionDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateral',
    outputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultCollateralRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'poolId', internalType: 'uint128', type: 'uint128' },
      { name: 'collateralType', internalType: 'address', type: 'address' },
    ],
    name: 'getVaultDebt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
] as const

export const synthetixSandboxLocalSynthetixVaultModuleAddress =
  '0xb5A39c13b25cb5578BaC3f9C4DaA96e318281fC8' as const

export const synthetixSandboxLocalSynthetixVaultModuleConfig = {
  address: synthetixSandboxLocalSynthetixVaultModuleAddress,
  abi: synthetixSandboxLocalSynthetixVaultModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/oracle_manager/CoreModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixOracleManagerCoreModuleABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixOracleManagerCoreModuleAddress =
  '0x606ACC428283663F0EFA30c75f39912BdfF49364' as const

export const synthetixSandboxLocalSynthetixOracleManagerCoreModuleConfig = {
  address: synthetixSandboxLocalSynthetixOracleManagerCoreModuleAddress,
  abi: synthetixSandboxLocalSynthetixOracleManagerCoreModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/oracle_manager/InitialProxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixOracleManagerInitialProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

export const synthetixSandboxLocalSynthetixOracleManagerInitialProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalSynthetixOracleManagerInitialProxyConfig = {
  address: synthetixSandboxLocalSynthetixOracleManagerInitialProxyAddress,
  abi: synthetixSandboxLocalSynthetixOracleManagerInitialProxyABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/oracle_manager/NodeModule.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixOracleManagerNodeModuleABI = [
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixSandboxLocalSynthetixOracleManagerNodeModuleAddress =
  '0xBf1Dd0f3d0c9849127992AC86eB79D188b7CA6E5' as const

export const synthetixSandboxLocalSynthetixOracleManagerNodeModuleConfig = {
  address: synthetixSandboxLocalSynthetixOracleManagerNodeModuleAddress,
  abi: synthetixSandboxLocalSynthetixOracleManagerNodeModuleABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/oracle_manager/OracleRouter.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixOracleManagerOracleRouterABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixSandboxLocalSynthetixOracleManagerOracleRouterAddress =
  '0xcdDEF040597b7566eC7645fD7be15f5e14a2F920' as const

export const synthetixSandboxLocalSynthetixOracleManagerOracleRouterConfig = {
  address: synthetixSandboxLocalSynthetixOracleManagerOracleRouterAddress,
  abi: synthetixSandboxLocalSynthetixOracleManagerOracleRouterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// /synthetix-sandbox/local/synthetix/oracle_manager/Proxy.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthetixSandboxLocalSynthetixOracleManagerProxyABI = [
  {
    type: 'error',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
    ],
    name: 'ImplementationIsSterile',
  },
  { type: 'error', inputs: [], name: 'NoChange' },
  {
    type: 'error',
    inputs: [{ name: 'contr', internalType: 'address', type: 'address' }],
    name: 'NotAContract',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'NotNominated',
  },
  {
    type: 'error',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'Unauthorized',
  },
  { type: 'error', inputs: [], name: 'UpgradeSimulationFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'self', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newNominatedOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceNomination',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'simulateUpgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    type: 'error',
    inputs: [{ name: 'deviation', internalType: 'int256', type: 'int256' }],
    name: 'DeviationToleranceExceeded',
  },
  { type: 'error', inputs: [], name: 'InvalidInputPrice' },
  {
    type: 'error',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
    name: 'InvalidNodeDefinition',
  },
  {
    type: 'error',
    inputs: [{ name: 'price', internalType: 'int256', type: 'int256' }],
    name: 'InvalidPrice',
  },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'NodeNotRegistered',
  },
  { type: 'error', inputs: [], name: 'OverflowInt256ToUint256' },
  { type: 'error', inputs: [], name: 'OverflowInt56ToInt24' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToInt256' },
  { type: 'error', inputs: [], name: 'OverflowUint256ToUint160' },
  { type: 'error', inputs: [], name: 'OverflowUint56ToInt56' },
  { type: 'error', inputs: [], name: 'StalenessToleranceExceeded' },
  {
    type: 'error',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'UnprocessableNode',
  },
  {
    type: 'error',
    inputs: [
      {
        name: 'operation',
        internalType: 'enum ReducerNode.Operations',
        type: 'uint8',
      },
    ],
    name: 'UnsupportedOperation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'parameters',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'parents',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'NodeRegistered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getNode',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeDefinition.Data',
        type: 'tuple',
        components: [
          {
            name: 'nodeType',
            internalType: 'enum NodeDefinition.NodeType',
            type: 'uint8',
          },
          { name: 'parameters', internalType: 'bytes', type: 'bytes' },
          { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getNodeId',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'process',
    outputs: [
      {
        name: 'node',
        internalType: 'struct NodeOutput.Data',
        type: 'tuple',
        components: [
          { name: 'price', internalType: 'int256', type: 'int256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: '__slotAvailableForFutureUse1',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: '__slotAvailableForFutureUse2',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'nodeType',
        internalType: 'enum NodeDefinition.NodeType',
        type: 'uint8',
      },
      { name: 'parameters', internalType: 'bytes', type: 'bytes' },
      { name: 'parents', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'registerNode',
    outputs: [{ name: 'nodeId', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

export const synthetixSandboxLocalSynthetixOracleManagerProxyAddress =
  '0xc0958BD10cB079b7A6bfeC7Fb695F75845830E5f' as const

export const synthetixSandboxLocalSynthetixOracleManagerProxyConfig = {
  address: synthetixSandboxLocalSynthetixOracleManagerProxyAddress,
  abi: synthetixSandboxLocalSynthetixOracleManagerProxyABI,
} as const
